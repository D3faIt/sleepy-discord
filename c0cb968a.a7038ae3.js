(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{249:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return s}));var n=r(3),a=r(7),c=(r(0),r(323)),o={title:"SleepyDiscord::json::ArrayWrapper"},l={unversionedId:"reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",id:"reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",isDocsHomePage:!1,title:"SleepyDiscord::json::ArrayWrapper",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper.md",slug:"/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",version:"current",sidebar:"Reference",previous:{title:"SleepyDiscord::json::ArrayStringWrapper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper"},next:{title:"SleepyDiscord::json::ArrayWrapper< Value, Base >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper_3_01_value_00_01_base_01_4"}},i=[{value:"inherited members",id:"inherited-members",children:[]},{value:"Detailed Description",id:"detailed-description",children:[]},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using DocType",id:"using-doctype",children:[]}]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function get",id:"function-get",children:[]},{value:"function get",id:"function-get-1",children:[]},{value:"function get",id:"function-get-2",children:[]},{value:"function get",id:"function-get-3",children:[]},{value:"function get",id:"function-get-4",children:[]},{value:"function vector",id:"function-vector",children:[]},{value:"function list",id:"function-list",children:[]},{value:"function cArray",id:"function-carray",children:[]},{value:"function operator Values",id:"function-operator-values",children:[]},{value:"function operator std::vector&lt; TypeToConvertTo &gt;",id:"function-operator-stdvector-typetoconvertto-",children:[]},{value:"function operator std::list&lt; TypeToConvertTo &gt;",id:"function-operator-stdlist-typetoconvertto-",children:[]}]}],p={toc:i};function s(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null," ",Object(c.b)("a",{parentName:"p",href:"#detailed-description"},"More...")),Object(c.b)("p",null,"Inherits from ",Object(c.b)("a",{parentName:"p",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper"},"SleepyDiscord::json::ArrayStringWrapper")),Object(c.b)("h2",{id:"inherited-members"},"inherited members"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Public Functions inherited from ",Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper"},"SleepyDiscord::json::ArrayStringWrapper"))),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper#function-arraystringwrapper"},"ArrayStringWrapper")),"(const Value & json)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const Value &"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper#function-getdoc"},"getDoc")),"() const")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper#function-operator-const-value-&"},"operator const Value &")),"() const")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class Callback ",">"," ",Object(c.b)("br",null),"const bool"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper#function-getdoc"},"getDoc")),"(const Callback & callback) const")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Public Attributes inherited from ",Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper"},"SleepyDiscord::json::ArrayStringWrapper"))),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const Value &"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper#variable-json"},"json")))))),Object(c.b)("h2",{id:"detailed-description"},"Detailed Description"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class TypeToConvertTo ,\nclass Base  =ArrayStringWrapper>\nstruct SleepyDiscord::json::ArrayWrapper;\n")),Object(c.b)("h2",{id:"public-types-documentation"},"Public Types Documentation"),Object(c.b)("h3",{id:"using-doctype"},"using DocType"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ArrayWrapper< TypeToConvertTo, Base >::DocType =  decltype(std::declval<Base>().getDoc());\n")),Object(c.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(c.b)("h3",{id:"function-get"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline Container get(\n    DocType doc\n)\n")),Object(c.b)("h3",{id:"function-get-1"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline Container get()\n")),Object(c.b)("h3",{id:"function-get-2"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type  =TypeToConvertTo>\ninline Container< Type > get()\n")),Object(c.b)("h3",{id:"function-get-3"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline bool get(\n    Container & value\n)\n")),Object(c.b)("h3",{id:"function-get-4"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type  =TypeToConvertTo>\ninline bool get(\n    Container< Type > & value\n)\n")),Object(c.b)("h3",{id:"function-vector"},"function vector"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::vector< TypeToConvertTo > vector()\n")),Object(c.b)("h3",{id:"function-list"},"function list"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::list< TypeToConvertTo > list()\n")),Object(c.b)("h3",{id:"function-carray"},"function cArray"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline TypeToConvertTo * cArray()\n")),Object(c.b)("h3",{id:"function-operator-values"},"function operator Values"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator Values()\n")),Object(c.b)("h3",{id:"function-operator-stdvector-typetoconvertto-"},"function operator std::vector< TypeToConvertTo >"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator std::vector< TypeToConvertTo >()\n")),Object(c.b)("h3",{id:"function-operator-stdlist-typetoconvertto-"},"function operator std::list< TypeToConvertTo >"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator std::list< TypeToConvertTo >()\n")),Object(c.b)("hr",null),Object(c.b)("p",null,"Updated on 27 July 2021 at 06:05:19 UTC"))}s.isMDXComponent=!0},323:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return j}));var n=r(0),a=r.n(n);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=s(r),d=n,j=b["".concat(o,".").concat(d)]||b[d]||u[d]||c;return r?a.a.createElement(j,l(l({ref:t},p),{},{components:r})):a.a.createElement(j,l({ref:t},p))}));function j(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,o=new Array(c);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<c;p++)o[p]=r[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);