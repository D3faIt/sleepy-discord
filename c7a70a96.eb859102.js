(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{304:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return p}));var c=t(3),a=t(7),s=(t(0),t(383)),i={title:"SleepyDiscord::BaseDiscordClient"},o={unversionedId:"reference/Classes/class_sleepy_discord_1_1_base_discord_client",id:"reference/Classes/class_sleepy_discord_1_1_base_discord_client",isDocsHomePage:!1,title:"SleepyDiscord::BaseDiscordClient",description:"Inherits from SleepyDiscord::GenericMessageReceiver",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_base_discord_client.md",slug:"/reference/Classes/class_sleepy_discord_1_1_base_discord_client",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_base_discord_client",version:"current",sidebar:"Reference",previous:{title:"SleepyDiscord::ASIOUDPClient",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client"},next:{title:"SleepyDiscord::BaseVoiceEventHandler",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_base_voice_event_handler"}},r=[{value:"inherited members",id:"inherited-members",children:[]},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"enum GetMessagesKey",id:"enum-getmessageskey",children:[]},{value:"enum AssignmentType",id:"enum-assignmenttype",children:[]},{value:"using RequestCallback",id:"using-requestcallback",children:[]},{value:"typedef PostableTask",id:"typedef-postabletask",children:[]}]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function BaseDiscordClient",id:"function-basediscordclient",children:[]},{value:"function BaseDiscordClient",id:"function-basediscordclient-1",children:[]},{value:"function ~BaseDiscordClient",id:"function-basediscordclient-2",children:[]},{value:"function request",id:"function-request",children:[]},{value:"function requestAsync",id:"function-requestasync",children:[]},{value:"function requestSync",id:"function-requestsync",children:[]},{value:"function path",id:"function-path",children:[]},{value:"function request",id:"function-request-1",children:[]},{value:"function request",id:"function-request-2",children:[]},{value:"function testFunction",id:"function-testfunction",children:[]},{value:"function getChannel",id:"function-getchannel",children:[]},{value:"function editChannel",id:"function-editchannel",children:[]},{value:"function editChannelName",id:"function-editchannelname",children:[]},{value:"function editChannelTopic",id:"function-editchanneltopic",children:[]},{value:"function deleteChannel",id:"function-deletechannel",children:[]},{value:"function getMessages",id:"function-getmessages",children:[]},{value:"function getMessage",id:"function-getmessage",children:[]},{value:"function createInvalidEmbed",id:"function-createinvalidembed",children:[]},{value:"function sendMessage",id:"function-sendmessage",children:[]},{value:"function sendMessage",id:"function-sendmessage-1",children:[]},{value:"function uploadFile",id:"function-uploadfile",children:[]},{value:"function uploadFile",id:"function-uploadfile-1",children:[]},{value:"function addReaction",id:"function-addreaction",children:[]},{value:"function removeReaction",id:"function-removereaction",children:[]},{value:"function getReactions",id:"function-getreactions",children:[]},{value:"function removeAllReactions",id:"function-removeallreactions",children:[]},{value:"function editMessage",id:"function-editmessage",children:[]},{value:"function editMessage",id:"function-editmessage-1",children:[]},{value:"function deleteMessage",id:"function-deletemessage",children:[]},{value:"function bulkDeleteMessages",id:"function-bulkdeletemessages",children:[]},{value:"function editChannelPermissions",id:"function-editchannelpermissions",children:[]},{value:"function getChannelInvites",id:"function-getchannelinvites",children:[]},{value:"function createChannelInvite",id:"function-createchannelinvite",children:[]},{value:"function removeChannelPermission",id:"function-removechannelpermission",children:[]},{value:"function sendTyping",id:"function-sendtyping",children:[]},{value:"function getPinnedMessages",id:"function-getpinnedmessages",children:[]},{value:"function pinMessage",id:"function-pinmessage",children:[]},{value:"function unpinMessage",id:"function-unpinmessage",children:[]},{value:"function addRecipient",id:"function-addrecipient",children:[]},{value:"function removeRecipient",id:"function-removerecipient",children:[]},{value:"function deleteReaction",id:"function-deletereaction",children:[]},{value:"function deleteAllReactions",id:"function-deleteallreactions",children:[]},{value:"function deleteChannelPermission",id:"function-deletechannelpermission",children:[]},{value:"function deleteRecipient",id:"function-deleterecipient",children:[]},{value:"function editMessage",id:"function-editmessage-2",children:[]},{value:"function sendMessage",id:"function-sendmessage-2",children:[]},{value:"function getServer",id:"function-getserver",children:[]},{value:"function deleteServer",id:"function-deleteserver",children:[]},{value:"function getServerChannels",id:"function-getserverchannels",children:[]},{value:"function createTextChannel",id:"function-createtextchannel",children:[]},{value:"function createChannel",id:"function-createchannel",children:[]},{value:"function editChannelPositions",id:"function-editchannelpositions",children:[]},{value:"function getMember",id:"function-getmember",children:[]},{value:"function listMembers",id:"function-listmembers",children:[]},{value:"function addMember",id:"function-addmember",children:[]},{value:"function editMember",id:"function-editmember",children:[]},{value:"function muteServerMember",id:"function-muteservermember",children:[]},{value:"function editNickname",id:"function-editnickname",children:[]},{value:"function addRole",id:"function-addrole",children:[]},{value:"function removeRole",id:"function-removerole",children:[]},{value:"function kickMember",id:"function-kickmember",children:[]},{value:"function getBans",id:"function-getbans",children:[]},{value:"function banMember",id:"function-banmember",children:[]},{value:"function unbanMember",id:"function-unbanmember",children:[]},{value:"function getRoles",id:"function-getroles",children:[]},{value:"function createRole",id:"function-createrole",children:[]},{value:"function editRolePosition",id:"function-editroleposition",children:[]},{value:"function editRole",id:"function-editrole",children:[]},{value:"function deleteRole",id:"function-deleterole",children:[]},{value:"function pruneMembers",id:"function-prunemembers",children:[]},{value:"function getVoiceRegions",id:"function-getvoiceregions",children:[]},{value:"function getServerInvites",id:"function-getserverinvites",children:[]},{value:"function getIntegrations",id:"function-getintegrations",children:[]},{value:"function createIntegration",id:"function-createintegration",children:[]},{value:"function editIntergration",id:"function-editintergration",children:[]},{value:"function deleteIntegration",id:"function-deleteintegration",children:[]},{value:"function syncIntegration",id:"function-syncintegration",children:[]},{value:"function getServerWidget",id:"function-getserverwidget",children:[]},{value:"function inviteEndpoint",id:"function-inviteendpoint",children:[]},{value:"function getInvite",id:"function-getinvite",children:[]},{value:"function deleteInvite",id:"function-deleteinvite",children:[]},{value:"function acceptInvite",id:"function-acceptinvite",children:[]},{value:"function getCurrentUser",id:"function-getcurrentuser",children:[]},{value:"function getUser",id:"function-getuser",children:[]},{value:"function getServers",id:"function-getservers",children:[]},{value:"function leaveServer",id:"function-leaveserver",children:[]},{value:"function getDirectMessageChannels",id:"function-getdirectmessagechannels",children:[]},{value:"function createDirectMessageChannel",id:"function-createdirectmessagechannel",children:[]},{value:"function getUserConnections",id:"function-getuserconnections",children:[]},{value:"function createWebhook",id:"function-createwebhook",children:[]},{value:"function getChannelWebhooks",id:"function-getchannelwebhooks",children:[]},{value:"function getServerWebhooks",id:"function-getserverwebhooks",children:[]},{value:"function getWebhook",id:"function-getwebhook",children:[]},{value:"function editWebhook",id:"function-editwebhook",children:[]},{value:"function deleteWebhook",id:"function-deletewebhook",children:[]},{value:"function requestExecuteWebhook",id:"function-requestexecutewebhook",children:[]},{value:"function executeWebhook",id:"function-executewebhook",children:[]},{value:"function executeWebhook",id:"function-executewebhook-1",children:[]},{value:"function executeWebhook",id:"function-executewebhook-2",children:[]},{value:"function createGlobalAppCommand",id:"function-createglobalappcommand",children:[]},{value:"function editGlobalAppCommand",id:"function-editglobalappcommand",children:[]},{value:"function getGlobalAppCommands",id:"function-getglobalappcommands",children:[]},{value:"function getGlobalAppCommand",id:"function-getglobalappcommand",children:[]},{value:"function deleteGlobalAppCommand",id:"function-deleteglobalappcommand",children:[]},{value:"function createServerAppCommand",id:"function-createserverappcommand",children:[]},{value:"function editServerAppCommand",id:"function-editserverappcommand",children:[]},{value:"function getServerAppCommands",id:"function-getserverappcommands",children:[]},{value:"function getServerAppCommand",id:"function-getserverappcommand",children:[]},{value:"function deleteServerAppCommand",id:"function-deleteserverappcommand",children:[]},{value:"function createInteractionResponse",id:"function-createinteractionresponse",children:[]},{value:"function editOriginalInteractionResponse",id:"function-editoriginalinteractionresponse",children:[]},{value:"function deleteOriginalInteractionResponse",id:"function-deleteoriginalinteractionresponse",children:[]},{value:"function createFollowupMessage",id:"function-createfollowupmessage",children:[]},{value:"function editFollowupMessage",id:"function-editfollowupmessage",children:[]},{value:"function deleteFollowupMessage",id:"function-deletefollowupmessage",children:[]},{value:"function batchEditAppCommandPermissions",id:"function-batcheditappcommandpermissions",children:[]},{value:"function editServerAppCommandPermission",id:"function-editserverappcommandpermission",children:[]},{value:"function getServerAppCommandPermissions",id:"function-getserverappcommandpermissions",children:[]},{value:"function getAppCommandPermissions",id:"function-getappcommandpermissions",children:[]},{value:"function createAppCommand",id:"function-createappcommand",children:[]},{value:"function editAppCommand",id:"function-editappcommand",children:[]},{value:"function getAppCommands",id:"function-getappcommands",children:[]},{value:"function getAppCommand",id:"function-getappcommand",children:[]},{value:"function deleteAppCommand",id:"function-deleteappcommand",children:[]},{value:"function createStageInstance",id:"function-createstageinstance",children:[]},{value:"function getStageInstance",id:"function-getstageinstance",children:[]},{value:"function editStageInstance",id:"function-editstageinstance",children:[]},{value:"function deleteStageInstance",id:"function-deletestageinstance",children:[]},{value:"function updateStatus",id:"function-updatestatus",children:[]},{value:"function requestServerMembers",id:"function-requestservermembers",children:[]},{value:"function getServerBanner",id:"function-getserverbanner",children:[]},{value:"function getServerBanner",id:"function-getserverbanner-1",children:[]},{value:"function waitTilReady",id:"function-waittilready",children:[]},{value:"function isReady",id:"function-isready",children:[]},{value:"function isQuiting",id:"function-isquiting",children:[]},{value:"function isBot",id:"function-isbot",children:[]},{value:"function getID",id:"function-getid",children:[]},{value:"function setShardID",id:"function-setshardid",children:[]},{value:"function getShardID",id:"function-getshardid",children:[]},{value:"function getShardCount",id:"function-getshardcount",children:[]},{value:"function hasIntents",id:"function-hasintents",children:[]},{value:"function getIntents",id:"function-getintents",children:[]},{value:"function setIntents",id:"function-setintents",children:[]},{value:"function quit",id:"function-quit",children:[]},{value:"function run",id:"function-run",children:[]},{value:"function setIntents",id:"function-setintents-1",children:[]},{value:"function setIntents",id:"function-setintents-2",children:[]},{value:"function useCompression",id:"function-usecompression",children:[]},{value:"function useCompression",id:"function-usecompression-1",children:[]},{value:"function setScheduleHandler",id:"function-setschedulehandler",children:[]},{value:"function getScheduleHandler",id:"function-getschedulehandler",children:[]},{value:"function schedule",id:"function-schedule",children:[]},{value:"function schedule",id:"function-schedule-1",children:[]},{value:"function schedule",id:"function-schedule-2",children:[]},{value:"function unschedule",id:"function-unschedule",children:[]},{value:"function postTask",id:"function-posttask",children:[]},{value:"function createServerCache",id:"function-createservercache",children:[]},{value:"function setServerCache",id:"function-setservercache",children:[]},{value:"function getServerCache",id:"function-getservercache",children:[]},{value:"function getCDN_URL",id:"function-getcdn_url",children:[]}]},{value:"Protected Functions Documentation",id:"protected-functions-documentation",children:[{value:"function onDepletedRequestSupply",id:"function-ondepletedrequestsupply",children:[]},{value:"function onExceededRateLimit",id:"function-onexceededratelimit",children:[]},{value:"function onReady",id:"function-onready",children:[]},{value:"function onResumed",id:"function-onresumed",children:[]},{value:"function onDeleteServer",id:"function-ondeleteserver",children:[]},{value:"function onEditServer",id:"function-oneditserver",children:[]},{value:"function onBan",id:"function-onban",children:[]},{value:"function onUnban",id:"function-onunban",children:[]},{value:"function onMember",id:"function-onmember",children:[]},{value:"function onRemoveMember",id:"function-onremovemember",children:[]},{value:"function onEditMember",id:"function-oneditmember",children:[]},{value:"function onRole",id:"function-onrole",children:[]},{value:"function onDeleteRole",id:"function-ondeleterole",children:[]},{value:"function onEditRole",id:"function-oneditrole",children:[]},{value:"function onEditEmojis",id:"function-oneditemojis",children:[]},{value:"function onMemberChunk",id:"function-onmemberchunk",children:[]},{value:"function onDeleteChannel",id:"function-ondeletechannel",children:[]},{value:"function onEditChannel",id:"function-oneditchannel",children:[]},{value:"function onPinMessage",id:"function-onpinmessage",children:[]},{value:"function onPresenceUpdate",id:"function-onpresenceupdate",children:[]},{value:"function onEditUser",id:"function-onedituser",children:[]},{value:"function onEditUserSettings",id:"function-oneditusersettings",children:[]},{value:"function onEditVoiceState",id:"function-oneditvoicestate",children:[]},{value:"function onTyping",id:"function-ontyping",children:[]},{value:"function onDeleteMessages",id:"function-ondeletemessages",children:[]},{value:"function onEditMessage",id:"function-oneditmessage",children:[]},{value:"function onEditVoiceServer",id:"function-oneditvoiceserver",children:[]},{value:"function onReaction",id:"function-onreaction",children:[]},{value:"function onDeleteReaction",id:"function-ondeletereaction",children:[]},{value:"function onDeleteAllReaction",id:"function-ondeleteallreaction",children:[]},{value:"function onMessage",id:"function-onmessage",children:[]},{value:"function onServer",id:"function-onserver",children:[]},{value:"function onChannel",id:"function-onchannel",children:[]},{value:"function onDispatch",id:"function-ondispatch",children:[]},{value:"function onInteraction",id:"function-oninteraction",children:[]},{value:"function onAppCommand",id:"function-onappcommand",children:[]},{value:"function onEditAppCommand",id:"function-oneditappcommand",children:[]},{value:"function onDeleteAppCommand",id:"function-ondeleteappcommand",children:[]},{value:"function onStageInstance",id:"function-onstageinstance",children:[]},{value:"function onDeleteStageInstance",id:"function-ondeletestageinstance",children:[]},{value:"function onEditStageInstance",id:"function-oneditstageinstance",children:[]},{value:"function onUnknownEvent",id:"function-onunknownevent",children:[]},{value:"function onHeartbeat",id:"function-onheartbeat",children:[]},{value:"function onHeartbeatAck",id:"function-onheartbeatack",children:[]},{value:"function onInvaldSession",id:"function-oninvaldsession",children:[]},{value:"function onDisconnect",id:"function-ondisconnect",children:[]},{value:"function onResume",id:"function-onresume",children:[]},{value:"function onQuit",id:"function-onquit",children:[]},{value:"function onRestart",id:"function-onrestart",children:[]},{value:"function onResponse",id:"function-onresponse",children:[]},{value:"function sleep",id:"function-sleep",children:[]},{value:"function fileRead",id:"function-fileread",children:[]},{value:"function tick",id:"function-tick",children:[]},{value:"function onError",id:"function-onerror",children:[]},{value:"function processMessage",id:"function-processmessage",children:[]},{value:"function processMessage",id:"function-processmessage-1",children:[]},{value:"function processCloseCode",id:"function-processclosecode",children:[]},{value:"function heartbeat",id:"function-heartbeat",children:[]},{value:"function sendHeartbeat",id:"function-sendheartbeat",children:[]},{value:"function resetHeartbeatValues",id:"function-resetheartbeatvalues",children:[]},{value:"function getToken",id:"function-gettoken",children:[]},{value:"function setToken",id:"function-settoken",children:[]},{value:"function start",id:"function-start",children:[]},{value:"function connect",id:"function-connect",children:[]},{value:"function connect",id:"function-connect-1",children:[]},{value:"function handleFailToConnect",id:"function-handlefailtoconnect",children:[]},{value:"function send",id:"function-send",children:[]},{value:"function disconnect",id:"function-disconnect",children:[]},{value:"function reconnect",id:"function-reconnect",children:[]},{value:"function stopClient",id:"function-stopclient",children:[]},{value:"function initialize",id:"function-initialize",children:[]},{value:"function processMessage",id:"function-processmessage-2",children:[]},{value:"function processCloseCode",id:"function-processclosecode-1",children:[]},{value:"function runAsync",id:"function-runasync",children:[]},{value:"function getEpochTimeMillisecond",id:"function-getepochtimemillisecond",children:[]}]}],l={toc:r};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(c.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Inherits from ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver")),Object(s.b)("p",null,"Inherited by ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client"},"SleepyDiscord::UWebSocketsDiscordClient"),", ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client"},"SleepyDiscord::WebsocketppDiscordClient")),Object(s.b)("h2",{id:"inherited-members"},"inherited members"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Public Functions inherited from ",Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"virtual"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-~genericmessagereceiver"},"~GenericMessageReceiver")),"() =default")))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Protected Functions inherited from ",Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"const time_t"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-getretrydelay"},"getRetryDelay")),"()")))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Public Attributes inherited from ",Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"WebsocketConnection"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#variable-connection"},"connection")))))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Protected Attributes inherited from ",Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"int"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#variable-consecutivereconnectscount"},"consecutiveReconnectsCount")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("a",{parentName:"td",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_timer"},"Timer")),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#variable-reconnecttimer"},"reconnectTimer")))))),Object(s.b)("h2",{id:"public-types-documentation"},"Public Types Documentation"),Object(s.b)("h3",{id:"enum-getmessageskey"},"enum GetMessagesKey"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(s.b)("th",{parentName:"tr",align:null},"Value"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"na"),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"around"),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"before"),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"after"),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"limit"),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})))),Object(s.b)("h3",{id:"enum-assignmenttype"},"enum AssignmentType"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(s.b)("th",{parentName:"tr",align:null},"Value"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"TilDueTime"),Object(s.b)("td",{parentName:"tr",align:null},"0"),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"EpochTime"),Object(s.b)("td",{parentName:"tr",align:null},"1"),Object(s.b)("td",{parentName:"tr",align:null})))),Object(s.b)("h3",{id:"using-requestcallback"},"using RequestCallback"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::BaseDiscordClient::RequestCallback =  std::function<void(Response)>;\n")),Object(s.b)("h3",{id:"typedef-postabletask"},"typedef PostableTask"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"typedef TimedTask SleepyDiscord::BaseDiscordClient::PostableTask;\n")),Object(s.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(s.b)("h3",{id:"function-basediscordclient"},"function BaseDiscordClient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BaseDiscordClient() =default\n")),Object(s.b)("h3",{id:"function-basediscordclient-1"},"function BaseDiscordClient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline BaseDiscordClient(\n    const std::string _token\n)\n")),Object(s.b)("h3",{id:"function-basediscordclient-2"},"function ~BaseDiscordClient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"~BaseDiscordClient()\n")),Object(s.b)("h3",{id:"function-request"},"function request"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'Response request(\n    const RequestMethod method,\n    Route path,\n    const std::string jsonParameters ="",\n    const std::vector< Part > & multipartParameters ={},\n    RequestCallback callback =nullptr,\n    const RequestMode mode =Sync_AsyncQueue\n)\n')),Object(s.b)("h3",{id:"function-requestasync"},"function requestAsync"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'template <class ParmType >\ninline void requestAsync(\n    const RequestMethod method,\n    Route path,\n    std::function< void(ParmType)> callback,\n    const std::string jsonParameters ="",\n    const std::vector< Part > & multipartParameters ={},\n    const RequestMode mode =Async\n)\n')),Object(s.b)("h3",{id:"function-requestsync"},"function requestSync"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'template <class ParmType >\ninline Response requestSync(\n    const RequestMethod method,\n    Route path,\n    std::function< void(ParmType)> callback,\n    const std::string jsonParameters ="",\n    const std::vector< Part > & multipartParameters ={},\n    const RequestMode mode =Sync\n)\n')),Object(s.b)("h3",{id:"function-path"},"function path"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"const Route path(\n    const char * source,\n    std::initializer_list< std::string > values ={}\n)\n")),Object(s.b)("h3",{id:"function-request-1"},"function request"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'template <class RequestSettingsClass >\ninline Response request(\n    const RequestMethod method,\n    Route path,\n    RequestSettingsClass & settings,\n    const std::string jsonParameters ="",\n    const std::initializer_list< Part > & multipartParameters ={}\n)\n')),Object(s.b)("h3",{id:"function-request-2"},"function request"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'template <RequestMode mode,\nclass ParmType  =void,\nclass Callback  =RequestCallback>\ninline RequestModeType< mode >::ReturnType request(\n    const RequestMethod method,\n    Route path,\n    Callback callback,\n    const std::string jsonParameters ="",\n    const std::initializer_list< Part > & multipartParameters ={}\n)\n')),Object(s.b)("h3",{id:"function-testfunction"},"function testFunction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void testFunction(\n    std::string teststring\n)\n")),Object(s.b)("h3",{id:"function-getchannel"},"function getChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > getChannel(\n    Snowflake< Channel > channelID,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editchannel"},"function editChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Channel > editChannel(\n    Snowflake< Channel > channelID,\n    std::string name ="",\n    std::string topic ="",\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n')),Object(s.b)("h3",{id:"function-editchannelname"},"function editChannelName"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > editChannelName(\n    Snowflake< Channel > channelID,\n    std::string name,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editchanneltopic"},"function editChannelTopic"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > editChannelTopic(\n    Snowflake< Channel > channelID,\n    std::string topic,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deletechannel"},"function deleteChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > deleteChannel(\n    Snowflake< Channel > channelID,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getmessages"},"function getMessages"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Message > getMessages(\n    Snowflake< Channel > channelID,\n    GetMessagesKey when,\n    Snowflake< Message > messageID,\n    uint8_t limit =0\n)\n")),Object(s.b)("h3",{id:"function-getmessage"},"function getMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > getMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createinvalidembed"},"function createInvalidEmbed"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const Embed createInvalidEmbed()\n")),Object(s.b)("h3",{id:"function-sendmessage"},"function sendMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > sendMessage(\n    Snowflake< Channel > channelID,\n    std::string message,\n    Embed embed =Embed::Flag::INVALID_EMBED,\n    MessageReference replyingTo ={},\n    TTS tts =TTS::Default,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-sendmessage-1"},"function sendMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > sendMessage(\n    SendMessageParams params,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-uploadfile"},"function uploadFile"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > uploadFile(\n    Snowflake< Channel > channelID,\n    std::string fileLocation,\n    std::string message,\n    Embed embed =Embed::Flag::INVALID_EMBED,\n    MessageReference replyingTo ={},\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-uploadfile-1"},"function uploadFile"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > uploadFile(\n    SendMessageParams params,\n    std::string fileLocation,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-addreaction"},"function addReaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse addReaction(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-removereaction"},"function removeReaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse removeReaction(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji,\n    Snowflake< User > userID ="@me"\n)\n')),Object(s.b)("h3",{id:"function-getreactions"},"function getReactions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< User > getReactions(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji,\n    RequestSettings< ArrayResponse< Reaction >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-removeallreactions"},"function removeAllReactions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse removeAllReactions(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editmessage"},"function editMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string newMessage,\n    Embed embed =Embed::Flag::INVALID_EMBED,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editmessage-1"},"function editMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editMessage(\n    EditMessageParams params,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deletemessage"},"function deleteMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-bulkdeletemessages"},"function bulkDeleteMessages"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse bulkDeleteMessages(\n    Snowflake< Channel > channelID,\n    std::vector< Snowflake< Message >> messageIDs,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editchannelpermissions"},"function editChannelPermissions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editChannelPermissions(\n    Snowflake< Channel > channelID,\n    Snowflake< Overwrite > overwriteID,\n    int allow,\n    int deny,\n    std::string type\n)\n")),Object(s.b)("h3",{id:"function-getchannelinvites"},"function getChannelInvites"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Invite > getChannelInvites(\n    Snowflake< Channel > channelID,\n    RequestSettings< ArrayResponse< Invite >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createchannelinvite"},"function createChannelInvite"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > createChannelInvite(\n    Snowflake< Channel > channelID,\n    const uint64_t maxAge =0,\n    const uint64_t maxUses =0,\n    const bool temporary =false,\n    const bool unique =false\n)\n")),Object(s.b)("h3",{id:"function-removechannelpermission"},"function removeChannelPermission"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse removeChannelPermission(\n    Snowflake< Channel > channelID,\n    std::string ID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-sendtyping"},"function sendTyping"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse sendTyping(\n    Snowflake< Channel > channelID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getpinnedmessages"},"function getPinnedMessages"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Message > getPinnedMessages(\n    Snowflake< Channel > channelID,\n    RequestSettings< ArrayResponse< Message >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-pinmessage"},"function pinMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse pinMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-unpinmessage"},"function unpinMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse unpinMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-addrecipient"},"function addRecipient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse addRecipient(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-removerecipient"},"function removeRecipient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse removeRecipient(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deletereaction"},"function deleteReaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline BoolResponse deleteReaction(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji\n)\n")),Object(s.b)("h3",{id:"function-deleteallreactions"},"function deleteAllReactions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline StandardResponse deleteAllReactions(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID\n)\n")),Object(s.b)("h3",{id:"function-deletechannelpermission"},"function deleteChannelPermission"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline BoolResponse deleteChannelPermission(\n    Snowflake< Channel > channelID,\n    std::string ID\n)\n")),Object(s.b)("h3",{id:"function-deleterecipient"},"function deleteRecipient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline StandardResponse deleteRecipient(\n    Snowflake< Channel > channelID,\n    Snowflake< User > _userID\n)\n")),Object(s.b)("h3",{id:"function-editmessage-2"},"function editMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline ObjectResponse< Message > editMessage(\n    Message message,\n    std::string newMessage,\n    Embed embed =Embed::Flag::INVALID_EMBED\n)\n")),Object(s.b)("h3",{id:"function-sendmessage-2"},"function sendMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline ObjectResponse< Message > sendMessage(\n    Snowflake< Channel > channelID,\n    std::string message,\n    RequestSettings< ObjectResponse< Message >> settings\n)\n")),Object(s.b)("h3",{id:"function-getserver"},"function getServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Server > getServer(\n    Snowflake< Server > serverID,\n    RequestSettings< ObjectResponse< Server >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deleteserver"},"function deleteServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Server > deleteServer(\n    Snowflake< Server > serverID,\n    RequestSettings< ObjectResponse< Server >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getserverchannels"},"function getServerChannels"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Channel > getServerChannels(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createtextchannel"},"function createTextChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > createTextChannel(\n    Snowflake< Server > serverID,\n    std::string name,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createchannel"},"function createChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > createChannel(\n    Snowflake< Server > serverID,\n    std::string name,\n    Channel::ChannelType Type,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editchannelpositions"},"function editChannelPositions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Channel > editChannelPositions(\n    Snowflake< Server > serverID,\n    std::vector< std::pair< std::string, uint64_t >> positions,\n    RequestSettings< ArrayResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getmember"},"function getMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ServerMember > getMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    RequestSettings< ObjectResponse< ServerMember >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-listmembers"},"function listMembers"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ArrayResponse< ServerMember > listMembers(\n    Snowflake< Server > serverID,\n    uint16_t limit =0,\n    std::string after ="",\n    RequestSettings< ArrayResponse< ServerMember >> settings ={}\n)\n')),Object(s.b)("h3",{id:"function-addmember"},"function addMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< ServerMember > addMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    std::string accesToken,\n    std::string nick ="",\n    std::vector< Role > roles ={},\n    bool mute =false,\n    bool deaf =false\n)\n')),Object(s.b)("h3",{id:"function-editmember"},"function editMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse editMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    std::string nickname ="",\n    std::vector< Snowflake< Role >> roles ={},\n    int8_t mute =-1,\n    int8_t deaf =-1,\n    Snowflake< Channel > channelID ={}\n)\n')),Object(s.b)("h3",{id:"function-muteservermember"},"function muteServerMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse muteServerMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    bool mute =true,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editnickname"},"function editNickname"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editNickname(\n    Snowflake< Server > serverID,\n    std::string newNickname,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-addrole"},"function addRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse addRole(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    Snowflake< Role > roleID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-removerole"},"function removeRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse removeRole(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    Snowflake< Role > roleID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-kickmember"},"function kickMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse kickMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getbans"},"function getBans"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< User > getBans(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< User >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-banmember"},"function banMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse banMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    int deleteMessageDays =-1,\n    std::string reason ="",\n    RequestSettings< BoolResponse > settings ={}\n)\n')),Object(s.b)("h3",{id:"function-unbanmember"},"function unbanMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse unbanMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getroles"},"function getRoles"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Role > getRoles(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Role >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createrole"},"function createRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Role > createRole(\n    Snowflake< Server > serverID,\n    std::string name ="",\n    Permission permissions =Permission::NONE,\n    unsigned int color =0,\n    bool hoist =false,\n    bool mentionable =false\n)\n')),Object(s.b)("h3",{id:"function-editroleposition"},"function editRolePosition"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Role > editRolePosition(\n    Snowflake< Server > serverID,\n    std::vector< std::pair< std::string, uint64_t >> positions,\n    RequestSettings< ArrayResponse< Role >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editrole"},"function editRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'StringResponse editRole(\n    Snowflake< Server > serverID,\n    Snowflake< Role > roleID,\n    std::string name ="",\n    Permission permissions =Permission::NONE,\n    uint32_t color =1<< 24,\n    int8_t hoist =-1,\n    int8_t mentionable =-1\n)\n')),Object(s.b)("h3",{id:"function-deleterole"},"function deleteRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteRole(\n    Snowflake< Server > serverID,\n    Snowflake< Role > roleID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-prunemembers"},"function pruneMembers"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse pruneMembers(\n    Snowflake< Server > serverID,\n    const unsigned int numOfDays,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getvoiceregions"},"function getVoiceRegions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< VoiceRegion > getVoiceRegions(\n    RequestSettings< ArrayResponse< VoiceRegion >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getserverinvites"},"function getServerInvites"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Invite > getServerInvites(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Invite >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getintegrations"},"function getIntegrations"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"StringResponse getIntegrations(\n    Snowflake< Server > serverID,\n    RequestSettings< StringResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createintegration"},"function createIntegration"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse createIntegration(\n    Snowflake< Server > serverID,\n    std::string type,\n    std::string integrationID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editintergration"},"function editIntergration"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editIntergration(\n    Snowflake< Server > serverID,\n    std::string integrationID,\n    int expireBegavior,\n    int expireGracePeriod,\n    bool enbleEmoticons\n)\n")),Object(s.b)("h3",{id:"function-deleteintegration"},"function deleteIntegration"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteIntegration(\n    Snowflake< Server > serverID,\n    std::string integrationID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-syncintegration"},"function syncIntegration"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse syncIntegration(\n    Snowflake< Server > serverID,\n    std::string integrationID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getserverwidget"},"function getServerWidget"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ServerWidget > getServerWidget(\n    Snowflake< Server > serverID,\n    RequestSettings< ObjectResponse< ServerWidget >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-inviteendpoint"},"function inviteEndpoint"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > inviteEndpoint(\n    RequestMethod method,\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getinvite"},"function getInvite"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > getInvite(\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deleteinvite"},"function deleteInvite"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > deleteInvite(\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-acceptinvite"},"function acceptInvite"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > acceptInvite(\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getcurrentuser"},"function getCurrentUser"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< User > getCurrentUser(\n    RequestSettings< ObjectResponse< User >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getuser"},"function getUser"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< User > getUser(\n    Snowflake< User > userID,\n    RequestSettings< ObjectResponse< User >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getservers"},"function getServers"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Server > getServers(\n    RequestSettings< ArrayResponse< Server >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-leaveserver"},"function leaveServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse leaveServer(\n    Snowflake< Server > serverID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getdirectmessagechannels"},"function getDirectMessageChannels"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Channel > getDirectMessageChannels(\n    RequestSettings< ArrayResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createdirectmessagechannel"},"function createDirectMessageChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > createDirectMessageChannel(\n    std::string recipientID,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getuserconnections"},"function getUserConnections"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Connection > getUserConnections(\n    RequestSettings< ArrayResponse< Connection >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createwebhook"},"function createWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > createWebhook(\n    Snowflake< Channel > channelID,\n    std::string name,\n    std::string avatar ="",\n    RequestSettings< ObjectResponse< Webhook >> settings ={}\n)\n')),Object(s.b)("h3",{id:"function-getchannelwebhooks"},"function getChannelWebhooks"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Webhook > getChannelWebhooks(\n    Snowflake< Channel > channelID,\n    RequestSettings< ArrayResponse< Webhook >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getserverwebhooks"},"function getServerWebhooks"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Webhook > getServerWebhooks(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Webhook >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getwebhook"},"function getWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > getWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken ="",\n    RequestSettings< ObjectResponse< Webhook >> settings ={}\n)\n')),Object(s.b)("h3",{id:"function-editwebhook"},"function editWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > editWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken ="",\n    std::string name ="",\n    std::string avatar =""\n)\n')),Object(s.b)("h3",{id:"function-deletewebhook"},"function deleteWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse deleteWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken ="",\n    RequestSettings< BoolResponse > settings ={}\n)\n')),Object(s.b)("h3",{id:"function-requestexecutewebhook"},"function requestExecuteWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Webhook > requestExecuteWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    std::pair< std::string, std::string > pair,\n    bool wait,\n    std::string username,\n    std::string avatar_url,\n    bool tts\n)\n")),Object(s.b)("h3",{id:"function-executewebhook"},"function executeWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > executeWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    std::string content,\n    bool wait =false,\n    std::string username ="",\n    std::string avatar_url ="",\n    bool tts =false\n)\n')),Object(s.b)("h3",{id:"function-executewebhook-1"},"function executeWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > executeWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    std::vector< Embed > embeds,\n    bool wait =false,\n    std::string username ="",\n    std::string avatar_url ="",\n    bool tts =false\n)\n')),Object(s.b)("h3",{id:"function-executewebhook-2"},"function executeWebhook"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > executeWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    filePathPart file,\n    bool wait =false,\n    std::string username ="",\n    std::string avatar_url ="",\n    bool tts =false\n)\n')),Object(s.b)("h3",{id:"function-createglobalappcommand"},"function createGlobalAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > createGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string name,\n    std::string description,\n    Options & options =AppCommand::emptyOptions,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editglobalappcommand"},"function editGlobalAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > editGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< AppCommand > commandID,\n    std::string name,\n    std::string description,\n    Options & options =AppCommand::emptyOptions,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getglobalappcommands"},"function getGlobalAppCommands"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< AppCommand > getGlobalAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    RequestSettings< ArrayResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getglobalappcommand"},"function getGlobalAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< AppCommand > getGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deleteglobalappcommand"},"function deleteGlobalAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createserverappcommand"},"function createServerAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > createServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::string name,\n    std::string description,\n    Options & options =AppCommand::emptyOptions,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editserverappcommand"},"function editServerAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > editServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    std::string name,\n    std::string description,\n    Options & options =AppCommand::emptyOptions,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getserverappcommands"},"function getServerAppCommands"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< AppCommand > getServerAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getserverappcommand"},"function getServerAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< AppCommand > getServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deleteserverappcommand"},"function deleteServerAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createinteractionresponse"},"function createInteractionResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse createInteractionResponse(\n    Snowflake< Interaction > interactionID,\n    std::string token,\n    Interaction::Response response,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editoriginalinteractionresponse"},"function editOriginalInteractionResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editOriginalInteractionResponse(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    EditWebhookParams params,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deleteoriginalinteractionresponse"},"function deleteOriginalInteractionResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteOriginalInteractionResponse(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createfollowupmessage"},"function createFollowupMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > createFollowupMessage(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    WebHookParams params,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editfollowupmessage"},"function editFollowupMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editFollowupMessage(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    Snowflake< Message > messageID,\n    EditWebhookParams params,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deletefollowupmessage"},"function deleteFollowupMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteFollowupMessage(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-batcheditappcommandpermissions"},"function batchEditAppCommandPermissions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse batchEditAppCommandPermissions(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::vector< ServerAppCommandPermissions > permissions,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("p",null,"Batch edits permissions for all commands in a guild. Takes an array of partial objects including id and permissions. ",Object(s.b)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#batch-edit-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#batch-edit-application-command-permissions")),Object(s.b)("h3",{id:"function-editserverappcommandpermission"},"function editServerAppCommandPermission"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editServerAppCommandPermission(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    std::vector< AppCommand::Permissions > permissions,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("p",null,"Edits command permissions for a specific command for your application in a guild. ",Object(s.b)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#edit-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#edit-application-command-permissions")),Object(s.b)("h3",{id:"function-getserverappcommandpermissions"},"function getServerAppCommandPermissions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< ServerAppCommandPermissions > getServerAppCommandPermissions(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< ServerAppCommandPermissions >> settings ={}\n)\n")),Object(s.b)("p",null,"Fetches command permissions for all commands for your application in a guild. ",Object(s.b)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#get-guild-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#get-guild-application-command-permissions")),Object(s.b)("h3",{id:"function-getappcommandpermissions"},"function getAppCommandPermissions"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ServerAppCommandPermissions > getAppCommandPermissions(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< ServerAppCommandPermissions >> settings ={}\n)\n")),Object(s.b)("p",null,"Fetches command permissions for a specific command for your application in a guild. ",Object(s.b)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#get-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#get-application-command-permissions")),Object(s.b)("h3",{id:"function-createappcommand"},"function createAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > createAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::string name,\n    std::string description,\n    Options & options =AppCommand::emptyOptions,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editappcommand"},"function editAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > editAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    std::string name,\n    std::string description,\n    Options & options =AppCommand::emptyOptions,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getappcommands"},"function getAppCommands"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< AppCommand > getAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getappcommand"},"function getAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< AppCommand > getAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deleteappcommand"},"function deleteAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-createstageinstance"},"function createStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< User > createStageInstance(\n    Snowflake< Channel > channelID,\n    std::string topic,\n    StageInstance::PrivacyLevel privacyLevel =StageInstance::PrivacyLevel::NotSet,\n    RequestSettings< ObjectResponse< User >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-getstageinstance"},"function getStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< StageInstance > getStageInstance(\n    Snowflake< Channel > channelID,\n    RequestSettings< ObjectResponse< StageInstance >> settings ={}\n)\n")),Object(s.b)("h3",{id:"function-editstageinstance"},"function editStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editStageInstance(\n    Snowflake< Channel > channelID,\n    std::string topic,\n    StageInstance::PrivacyLevel privacyLevel =StageInstance::PrivacyLevel::NotSet,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-deletestageinstance"},"function deleteStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteStageInstance(\n    Snowflake< Channel > channelID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),Object(s.b)("h3",{id:"function-updatestatus"},"function updateStatus"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'void updateStatus(\n    std::string gameName ="",\n    uint64_t idleSince =0,\n    Status status =online,\n    bool afk =false\n)\n')),Object(s.b)("h3",{id:"function-requestservermembers"},"function requestServerMembers"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void requestServerMembers(\n    ServerMembersRequest request\n)\n")),Object(s.b)("h3",{id:"function-getserverbanner"},"function getServerBanner"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void getServerBanner(\n    Snowflake< Server > serverID,\n    std::string serverBanner,\n    std::string format,\n    std::function< void(StandardResponse &)> callback\n)\n")),Object(s.b)("h3",{id:"function-getserverbanner-1"},"function getServerBanner"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void getServerBanner(\n    Server & server,\n    std::string format\n)\n")),Object(s.b)("h3",{id:"function-waittilready"},"function waitTilReady"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void waitTilReady()\n")),Object(s.b)("h3",{id:"function-isready"},"function isReady"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const bool isReady()\n")),Object(s.b)("h3",{id:"function-isquiting"},"function isQuiting"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const bool isQuiting()\n")),Object(s.b)("h3",{id:"function-isbot"},"function isBot"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const bool isBot()\n")),Object(s.b)("h3",{id:"function-getid"},"function getID"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const Snowflake< User > getID()\n")),Object(s.b)("h3",{id:"function-setshardid"},"function setShardID"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void setShardID(\n    int _shardID,\n    int _shardCount\n)\n")),Object(s.b)("h3",{id:"function-getshardid"},"function getShardID"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const int getShardID()\n")),Object(s.b)("h3",{id:"function-getshardcount"},"function getShardCount"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const int getShardCount()\n")),Object(s.b)("h3",{id:"function-hasintents"},"function hasIntents"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const bool hasIntents()\n")),Object(s.b)("h3",{id:"function-getintents"},"function getIntents"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const IntentsRaw getIntents()\n")),Object(s.b)("h3",{id:"function-setintents"},"function setIntents"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void setIntents(\n    IntentsRaw newIntents\n)\n")),Object(s.b)("h3",{id:"function-quit"},"function quit"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void quit()\n")),Object(s.b)("h3",{id:"function-run"},"function run"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void run()\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client#function-run"},"SleepyDiscord::UWebSocketsDiscordClient::run"),", ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-run"},"SleepyDiscord::WebsocketppDiscordClient::run")),Object(s.b)("h3",{id:"function-setintents-1"},"function setIntents"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\ntypename T  =typename Container::value_type>\ninline void setIntents(\n    const Container & listOfIntents\n)\n")),Object(s.b)("h3",{id:"function-setintents-2"},"function setIntents"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <typename... Types>\ninline void setIntents(\n    Intent first,\n    Intent second,\n    Types... others\n)\n")),Object(s.b)("h3",{id:"function-usecompression"},"function useCompression"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Handler ,\nclass... Types>\ninline void useCompression(\n    Types &&... arguments\n)\n")),Object(s.b)("h3",{id:"function-usecompression-1"},"function useCompression"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void useCompression(\n    bool value =true\n)\n")),Object(s.b)("h3",{id:"function-setschedulehandler"},"function setScheduleHandler"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Handler ,\nclass... Types>\ninline void setScheduleHandler(\n    Types &&... arguments\n)\n")),Object(s.b)("h3",{id:"function-getschedulehandler"},"function getScheduleHandler"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline GenericScheduleHandler & getScheduleHandler()\n")),Object(s.b)("h3",{id:"function-schedule"},"function schedule"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual Timer schedule(\n    TimedTask code,\n    const time_t millisecondsTilDueTime\n)\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client#function-schedule"},"SleepyDiscord::UWebSocketsDiscordClient::schedule"),", ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-schedule"},"SleepyDiscord::WebsocketppDiscordClient::schedule")),Object(s.b)("h3",{id:"function-schedule-1"},"function schedule"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline Timer schedule(\n    TimedTask code,\n    const time_t milliseconds,\n    AssignmentType mode\n)\n")),Object(s.b)("h3",{id:"function-schedule-2"},"function schedule"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline Timer schedule(\n    void(BaseDiscordClient::*)() code,\n    const time_t milliseconds,\n    AssignmentType mode =TilDueTime\n)\n")),Object(s.b)("h3",{id:"function-unschedule"},"function unschedule"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void unschedule(\n    Timer & timer\n)\n")),Object(s.b)("h3",{id:"function-posttask"},"function postTask"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void postTask(\n    PostableTask code\n)\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-posttask"},"SleepyDiscord::WebsocketppDiscordClient::postTask")),Object(s.b)("h3",{id:"function-createservercache"},"function createServerCache"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"std::shared_ptr< ServerCache > createServerCache()\n")),Object(s.b)("h3",{id:"function-setservercache"},"function setServerCache"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void setServerCache(\n    std::shared_ptr< ServerCache > cache\n)\n")),Object(s.b)("h3",{id:"function-getservercache"},"function getServerCache"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::shared_ptr< ServerCache > & getServerCache()\n")),Object(s.b)("h3",{id:"function-getcdn_url"},"function getCDN_URL"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"static inline constexpr nonstd::string_view getCDN_URL()\n")),Object(s.b)("h2",{id:"protected-functions-documentation"},"Protected Functions Documentation"),Object(s.b)("h3",{id:"function-ondepletedrequestsupply"},"function onDepletedRequestSupply"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDepletedRequestSupply(\n    const Route::Bucket & bucket,\n    time_t timeTilReset\n)\n")),Object(s.b)("h3",{id:"function-onexceededratelimit"},"function onExceededRateLimit"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onExceededRateLimit(\n    bool global,\n    std::time_t timeTilRetry,\n    Request request,\n    bool & continueRequest\n)\n")),Object(s.b)("h3",{id:"function-onready"},"function onReady"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onReady(\n    Ready readyData\n)\n")),Object(s.b)("h3",{id:"function-onresumed"},"function onResumed"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onResumed()\n")),Object(s.b)("h3",{id:"function-ondeleteserver"},"function onDeleteServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteServer(\n    UnavailableServer server\n)\n")),Object(s.b)("h3",{id:"function-oneditserver"},"function onEditServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditServer(\n    Server server\n)\n")),Object(s.b)("h3",{id:"function-onban"},"function onBan"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onBan(\n    Snowflake< Server > serverID,\n    User user\n)\n")),Object(s.b)("h3",{id:"function-onunban"},"function onUnban"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onUnban(\n    Snowflake< Server > serverID,\n    User user\n)\n")),Object(s.b)("h3",{id:"function-onmember"},"function onMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onMember(\n    Snowflake< Server > serverID,\n    ServerMember member\n)\n")),Object(s.b)("h3",{id:"function-onremovemember"},"function onRemoveMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onRemoveMember(\n    Snowflake< Server > serverID,\n    User user\n)\n")),Object(s.b)("h3",{id:"function-oneditmember"},"function onEditMember"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditMember(\n    Snowflake< Server > serverID,\n    User user,\n    std::vector< Snowflake< Role >> roles,\n    std::string nick\n)\n")),Object(s.b)("h3",{id:"function-onrole"},"function onRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onRole(\n    Snowflake< Server > serverID,\n    Role role\n)\n")),Object(s.b)("h3",{id:"function-ondeleterole"},"function onDeleteRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteRole(\n    Snowflake< Server > serverID,\n    Snowflake< Role > roleID\n)\n")),Object(s.b)("h3",{id:"function-oneditrole"},"function onEditRole"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditRole(\n    Snowflake< Server > serverID,\n    Role role\n)\n")),Object(s.b)("h3",{id:"function-oneditemojis"},"function onEditEmojis"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditEmojis(\n    Snowflake< Server > serverID,\n    std::vector< Emoji > emojis\n)\n")),Object(s.b)("h3",{id:"function-onmemberchunk"},"function onMemberChunk"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onMemberChunk(\n    ServerMembersChunk memberChunk\n)\n")),Object(s.b)("h3",{id:"function-ondeletechannel"},"function onDeleteChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteChannel(\n    Channel channel\n)\n")),Object(s.b)("h3",{id:"function-oneditchannel"},"function onEditChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditChannel(\n    Channel channel\n)\n")),Object(s.b)("h3",{id:"function-onpinmessage"},"function onPinMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onPinMessage(\n    Snowflake< Channel > channelID,\n    std::string lastPinTimestamp\n)\n")),Object(s.b)("h3",{id:"function-onpresenceupdate"},"function onPresenceUpdate"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onPresenceUpdate(\n    PresenceUpdate presenseUpdate\n)\n")),Object(s.b)("h3",{id:"function-onedituser"},"function onEditUser"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditUser(\n    User user\n)\n")),Object(s.b)("h3",{id:"function-oneditusersettings"},"function onEditUserSettings"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditUserSettings(\n    const json::Value & jsonMessage\n)\n")),Object(s.b)("h3",{id:"function-oneditvoicestate"},"function onEditVoiceState"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditVoiceState(\n    VoiceState & state\n)\n")),Object(s.b)("h3",{id:"function-ontyping"},"function onTyping"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onTyping(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    time_t timestamp\n)\n")),Object(s.b)("h3",{id:"function-ondeletemessages"},"function onDeleteMessages"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteMessages(\n    Snowflake< Channel > channelID,\n    std::vector< Snowflake< Message >> messages\n)\n")),Object(s.b)("h3",{id:"function-oneditmessage"},"function onEditMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditMessage(\n    MessageRevisions revisioins\n)\n")),Object(s.b)("h3",{id:"function-oneditvoiceserver"},"function onEditVoiceServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditVoiceServer(\n    VoiceServerUpdate & update\n)\n")),Object(s.b)("h3",{id:"function-onreaction"},"function onReaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onReaction(\n    Snowflake< User > userID,\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    Emoji emoji\n)\n")),Object(s.b)("h3",{id:"function-ondeletereaction"},"function onDeleteReaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteReaction(\n    Snowflake< User > userID,\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    Emoji emoji\n)\n")),Object(s.b)("h3",{id:"function-ondeleteallreaction"},"function onDeleteAllReaction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteAllReaction(\n    Snowflake< Server > serverID,\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID\n)\n")),Object(s.b)("h3",{id:"function-onmessage"},"function onMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onMessage(\n    Message message\n)\n")),Object(s.b)("h3",{id:"function-onserver"},"function onServer"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onServer(\n    Server server\n)\n")),Object(s.b)("h3",{id:"function-onchannel"},"function onChannel"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onChannel(\n    Channel channel\n)\n")),Object(s.b)("h3",{id:"function-ondispatch"},"function onDispatch"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDispatch(\n    const json::Value & jsonMessage\n)\n")),Object(s.b)("h3",{id:"function-oninteraction"},"function onInteraction"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onInteraction(\n    Interaction interaction\n)\n")),Object(s.b)("h3",{id:"function-onappcommand"},"function onAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onAppCommand(\n    AppCommand appCommand\n)\n")),Object(s.b)("h3",{id:"function-oneditappcommand"},"function onEditAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onEditAppCommand(\n    AppCommand appCommand\n)\n")),Object(s.b)("h3",{id:"function-ondeleteappcommand"},"function onDeleteAppCommand"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onDeleteAppCommand(\n    AppCommand appCommand\n)\n")),Object(s.b)("h3",{id:"function-onstageinstance"},"function onStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onStageInstance(\n    StageInstance instance\n)\n")),Object(s.b)("h3",{id:"function-ondeletestageinstance"},"function onDeleteStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onDeleteStageInstance(\n    StageInstance instance\n)\n")),Object(s.b)("h3",{id:"function-oneditstageinstance"},"function onEditStageInstance"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onEditStageInstance(\n    StageInstance instance\n)\n")),Object(s.b)("h3",{id:"function-onunknownevent"},"function onUnknownEvent"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onUnknownEvent(\n    std::string name,\n    const json::Value & data\n)\n")),Object(s.b)("h3",{id:"function-onheartbeat"},"function onHeartbeat"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onHeartbeat()\n")),Object(s.b)("h3",{id:"function-onheartbeatack"},"function onHeartbeatAck"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onHeartbeatAck()\n")),Object(s.b)("h3",{id:"function-oninvaldsession"},"function onInvaldSession"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onInvaldSession()\n")),Object(s.b)("h3",{id:"function-ondisconnect"},"function onDisconnect"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDisconnect()\n")),Object(s.b)("h3",{id:"function-onresume"},"function onResume"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onResume()\n")),Object(s.b)("h3",{id:"function-onquit"},"function onQuit"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onQuit()\n")),Object(s.b)("h3",{id:"function-onrestart"},"function onRestart"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onRestart()\n")),Object(s.b)("h3",{id:"function-onresponse"},"function onResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onResponse(\n    Response response\n)\n")),Object(s.b)("h3",{id:"function-sleep"},"function sleep"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void sleep(\n    const unsigned int milliseconds\n)\n")),Object(s.b)("h3",{id:"function-fileread"},"function fileRead"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void fileRead(\n    const char * path,\n    std::string *const file\n)\n")),Object(s.b)("h3",{id:"function-tick"},"function tick"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void tick(\n    float deltaTime\n)\n")),Object(s.b)("h3",{id:"function-onerror"},"function onError"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void onError(\n    ErrorCode errorCode,\n    const std::string errorMessage\n)\n")),Object(s.b)("h3",{id:"function-processmessage"},"function processMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void processMessage(\n    const std::string & message\n) override\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplements"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-processmessage"},"SleepyDiscord::GenericMessageReceiver::processMessage")),Object(s.b)("h3",{id:"function-processmessage-1"},"function processMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void processMessage(\n    const WebSocketMessage message\n) override\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplements"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-processmessage"},"SleepyDiscord::GenericMessageReceiver::processMessage")),Object(s.b)("h3",{id:"function-processclosecode"},"function processCloseCode"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void processCloseCode(\n    const int16_t code\n) override\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplements"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-processclosecode"},"SleepyDiscord::GenericMessageReceiver::processCloseCode")),Object(s.b)("h3",{id:"function-heartbeat"},"function heartbeat"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void heartbeat()\n")),Object(s.b)("h3",{id:"function-sendheartbeat"},"function sendHeartbeat"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void sendHeartbeat()\n")),Object(s.b)("h3",{id:"function-resetheartbeatvalues"},"function resetHeartbeatValues"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void resetHeartbeatValues()\n")),Object(s.b)("h3",{id:"function-gettoken"},"function getToken"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::string getToken()\n")),Object(s.b)("h3",{id:"function-settoken"},"function setToken"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void setToken(\n    const std::string & value\n)\n")),Object(s.b)("h3",{id:"function-start"},"function start"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void start(\n    const std::string _token,\n    const char maxNumOfThreads =DEFAULT_THREADS,\n    int _shardID =0,\n    int _shardCount =0\n)\n")),Object(s.b)("h3",{id:"function-connect"},"function connect"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void connect()\n")),Object(s.b)("h3",{id:"function-connect-1"},"function connect"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual bool connect(\n    const std::string & ,\n    GenericMessageReceiver * ,\n    WebsocketConnection & \n)\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-connect"},"SleepyDiscord::WebsocketppDiscordClient::connect")),Object(s.b)("h3",{id:"function-handlefailtoconnect"},"function handleFailToConnect"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void handleFailToConnect() override\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplements"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-handlefailtoconnect"},"SleepyDiscord::GenericMessageReceiver::handleFailToConnect")),Object(s.b)("h3",{id:"function-send"},"function send"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void send(\n    std::string ,\n    WebsocketConnection & \n)\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-send"},"SleepyDiscord::WebsocketppDiscordClient::send")),Object(s.b)("h3",{id:"function-disconnect"},"function disconnect"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void disconnect(\n    unsigned int ,\n    const std::string ,\n    WebsocketConnection & \n)\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-disconnect"},"SleepyDiscord::WebsocketppDiscordClient::disconnect")),Object(s.b)("h3",{id:"function-reconnect"},"function reconnect"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"void reconnect(\n    const unsigned int status =4900\n)\n")),Object(s.b)("h3",{id:"function-stopclient"},"function stopClient"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void stopClient()\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-stopclient"},"SleepyDiscord::WebsocketppDiscordClient::stopClient")),Object(s.b)("h3",{id:"function-initialize"},"function initialize"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void initialize(\n    GenericMessageReceiver *& messageProcessor\n) const\n")),Object(s.b)("h3",{id:"function-processmessage-2"},"function processMessage"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void processMessage(\n    GenericMessageReceiver *& messageProcessor,\n    const std::string & message\n) const\n")),Object(s.b)("h3",{id:"function-processclosecode-1"},"function processCloseCode"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline void processCloseCode(\n    GenericMessageReceiver *& messageProcessor,\n    const int16_t & code\n) const\n")),Object(s.b)("h3",{id:"function-runasync"},"function runAsync"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual void runAsync()\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Reimplemented by"),": ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client#function-runasync"},"SleepyDiscord::UWebSocketsDiscordClient::runAsync"),", ",Object(s.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-runasync"},"SleepyDiscord::WebsocketppDiscordClient::runAsync")),Object(s.b)("h3",{id:"function-getepochtimemillisecond"},"function getEpochTimeMillisecond"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"virtual const time_t getEpochTimeMillisecond()\n")),Object(s.b)("hr",null),Object(s.b)("p",null,"Updated on  8 August 2021 at 21:14:25 UTC"))}p.isMDXComponent=!0},383:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var c=t(0),a=t.n(c);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);n&&(c=c.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,c)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,c,a=function(e,n){if(null==e)return{};var t,c,a={},s=Object.keys(e);for(c=0;c<s.length;c++)t=s[c],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(c=0;c<s.length;c++)t=s[c],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,c=e.mdxType,s=e.originalType,i=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),d=p(t),b=c,m=d["".concat(i,".").concat(b)]||d[b]||u[b]||s;return t?a.a.createElement(m,o(o({ref:n},l),{},{components:t})):a.a.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var s=t.length,i=new Array(s);i[0]=b;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o.mdxType="string"==typeof e?e:c,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);