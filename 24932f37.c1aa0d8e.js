(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{120:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return s})),t.d(e,"metadata",(function(){return p})),t.d(e,"toc",(function(){return c})),t.d(e,"default",(function(){return l}));var a=t(3),o=t(7),r=(t(0),t(381)),s={title:"include/sleepy_discord/slash_commands.h"},p={unversionedId:"reference/Files/slash__commands_8h",id:"reference/Files/slash__commands_8h",isDocsHomePage:!1,title:"include/sleepy_discord/slash_commands.h",description:"Namespaces",source:"@site/docs/reference/Files/slash__commands_8h.md",slug:"/reference/Files/slash__commands_8h",permalink:"/sleepy-discord/docs/reference/Files/slash__commands_8h",version:"current",sidebar:"Reference",previous:{title:"sleepy_discord/slash_commands.cpp",permalink:"/sleepy-discord/docs/reference/Files/slash__commands_8cpp"},next:{title:"include/sleepy_discord/sleepy_discord.h",permalink:"/sleepy-discord/docs/reference/Files/sleepy__discord_8h"}},c=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function AppCommand::Option::Choice::set&lt; json::Value &gt;",id:"function-appcommandoptionchoiceset-jsonvalue-",children:[]}]},{value:"Source code",id:"source-code",children:[]}],i={toc:c};function l(n){var e=n.components,t=Object(o.a)(n,["components"]);return Object(r.b)("wrapper",Object(a.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"namespaces"},"Namespaces"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(r.b)("h2",{id:"classes"},"Classes"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null}),Object(r.b)("th",{parentName:"tr",align:null},"Name"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command"},"SleepyDiscord::AppCommand")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option"},"SleepyDiscord::AppCommand::Option")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_choice"},"SleepyDiscord::AppCommand::Option::Choice")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_interaction_data"},"SleepyDiscord::AppCommand::InteractionData")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_interaction_data_1_1_option"},"SleepyDiscord::AppCommand::InteractionData::Option")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_permissions"},"SleepyDiscord::AppCommand::Permissions")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_server_app_command_permissions"},"SleepyDiscord::ServerAppCommandPermissions")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_get_default_3_01_app_command_1_1_option_1_1_default_01_4"},"SleepyDiscord::GetDefault< AppCommand::Option::Default >")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_app_command_callback_data"},"SleepyDiscord::InteractionAppCommandCallbackData")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction"},"SleepyDiscord::Interaction")))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"struct"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_1_1_response"},"SleepyDiscord::Interaction::Response")))))),Object(r.b)("h2",{id:"functions"},"Functions"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null}),Object(r.b)("th",{parentName:"tr",align:null},"Name"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"void"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Files/slash__commands_8h#function-appcommandoptionchoiceset%3C-jsonvalue-%3E"},"AppCommand::Option::Choice::set< json::Value >")),"(json::Value & _val)")))),Object(r.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(r.b)("h3",{id:"function-appcommandoptionchoiceset-jsonvalue-"},"function AppCommand::Option::Choice::set< json::Value >"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"inline void AppCommand::Option::Choice::set< json::Value >(\n    json::Value & _val\n)\n")),Object(r.b)("h2",{id:"source-code"},"Source code"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <vector>\n#include "discord_object_interface.h"\n#include "snowflake.h"\n#include "server.h"\n#include "channel.h"\n#include "embed.h"\n#include "message.h"\n#include "user.h"\n\nnamespace SleepyDiscord {\n    \n    struct AppCommand : public IdentifiableDiscordObject<AppCommand> {\n        AppCommand() = default;\n        AppCommand(json::Value & json);\n        AppCommand(const nonstd::string_view & json);\n        \n        struct Option : public DiscordObject {\n            Option() = default;\n            Option(json::Value & json);\n            Option(const nonstd::string_view & json);\n\n            enum class Type : int {\n                NONE              = 0, //made up type\n                SUB_COMMAND       = 1,\n                SUB_COMMAND_GROUP = 2,\n                STRING            = 3,\n                INTEGER           = 4,\n                BOOLEAN           = 5,\n                USER              = 6,\n                CHANNEL           = 7,\n                ROLE              = 8\n            };\n\n            struct Choice : public DiscordObject {\n                Choice() = default;\n                Choice(json::Value & json);\n                Choice(const nonstd::string_view & json);\n\n                std::string name;\n                json::Value value;\n\n                //warning crashes if type isn\'t correct\n                template<class Type>\n                inline const Type get() {\n                    return json::ClassTypeHelper<Type>::toType(value);\n                }\n\n                template<class Type>\n                inline const bool get(Type& target) {\n                    return json::castValue<Type, json::ClassTypeHelper<Type>>(target, value);\n                }\n\n                template<class Type>\n                inline void set(Type& val) {\n                    value = json::ClassTypeHelper<Type>::fromType(val);\n                }\n\n                JSONStructStart\n                    std::make_tuple(\n                        json::pair(&AppCommand::Option::Choice::name , "name" , json::REQUIRIED_FIELD),\n                        json::pair(&AppCommand::Option::Choice::value, "value", json::REQUIRIED_FIELD)\n                    );\n                JSONStructEnd\n            };\n\n            Type type;\n            std::string name;\n            std::string description;\n            enum class Default : char {\n                True = true,\n                False = false,\n                Undefined = -1\n            };\n            Default isDefault = Default::Undefined; //default is an already taken keyword\n            bool isRequired = false;\n            std::vector<Choice> choices;\n            std::vector<Option> options;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair<json::EnumTypeHelper     >(&AppCommand::Option::type       , "type"       , json::REQUIRIED_FIELD),\n                    json::pair                           (&AppCommand::Option::name       , "name"       , json::REQUIRIED_FIELD),\n                    json::pair                           (&AppCommand::Option::description, "description", json::OPTIONAL_FIELD ),\n                    json::pair<json::EnumTypeHelper     >(&AppCommand::Option::isDefault  , "default"    , json::OPTIONAL_FIELD ),\n                    json::pair                           (&AppCommand::Option::isRequired , "required"   , json::OPTIONAL_FIELD ),\n                    json::pair<json::ContainerTypeHelper>(&AppCommand::Option::choices    , "choices"    , json::OPTIONAL_FIELD ),\n                    json::pair<json::ContainerTypeHelper>(&AppCommand::Option::options    , "options"    , json::OPTIONAL_FIELD )\n                );\n            JSONStructEnd\n        };\n\n        struct InteractionData : public DiscordObject {\n            InteractionData() = default;\n            InteractionData(json::Value & json);\n            InteractionData(const nonstd::string_view & json);\n\n            struct Option : public DiscordObject {\n                Option() = default;\n                Option(json::Value & json);\n                Option(const nonstd::string_view & json);\n\n                std::string name;\n                json::Value value;\n                std::vector<Option> options;\n\n                //warning crashes on type error\n                template<class Type>\n                Type get() {\n                    return json::ClassTypeHelper<Type>::toType(value);\n                }\n\n                template<class Type>\n                bool get(Type& target) {\n                    return json::castValue<json::ClassTypeHelper<Type>>(target, value);\n                }\n\n                JSONStructStart\n                    std::make_tuple(\n                        json::pair                           (&AppCommand::InteractionData::Option::name   , "name"          , json::OPTIONAL_FIELD),\n                        json::pair                           (&AppCommand::InteractionData::Option::value  , "value"         , json::OPTIONAL_FIELD),\n                        json::pair<json::ContainerTypeHelper>(&AppCommand::InteractionData::Option::options, "options"       , json::OPTIONAL_FIELD)\n                    );\n                JSONStructEnd\n            };\n\n            Snowflake<AppCommand> ID;\n            std::string name;\n            std::vector<Option> options;\n            std::string customID;\n            ComponentType componentType;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair                           (&AppCommand::InteractionData::ID           , "id"            , json::OPTIONAL_FIELD),\n                    json::pair                           (&AppCommand::InteractionData::name         , "name"          , json::OPTIONAL_FIELD),\n                    json::pair<json::ContainerTypeHelper>(&AppCommand::InteractionData::options      , "options"       , json::OPTIONAL_FIELD),\n                    json::pair                           (&AppCommand::InteractionData::customID     , "custom_id"     , json::OPTIONAL_FIELD),\n                    json::pair<json::EnumTypeHelper     >(&AppCommand::InteractionData::componentType, "component_type", json::OPTIONAL_FIELD)\n                );\n            JSONStructEnd\n        };\n\n        struct Permissions : IdentifiableDiscordObject<DiscordObject> {\n            enum class Type : int {\n                ROLE = 1,\n                USER = 2\n            };\n            Permissions::Type Type;\n            bool Permission;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair                      (&Permissions::ID        , "id"        , json::REQUIRIED_FIELD),\n                    json::pair<json::EnumTypeHelper>(&Permissions::Type      , "type"      , json::REQUIRIED_FIELD),\n                    json::pair                      (&Permissions::Permission, "permission", json::REQUIRIED_FIELD)\n                );\n            JSONStructEnd\n        };\n\n        Snowflake<DiscordObject> applicationID;\n        std::string name;\n        std::string description;\n        std::vector<Option> options;\n        Snowflake<Server> serverID;\n\n        using EmptyOptions = std::array<EmptyDiscordObject, 0>;\n        static constexpr EmptyOptions emptyOptions = {};\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&AppCommand::ID           , "id"            , json::REQUIRIED_FIELD),\n                json::pair                           (&AppCommand::applicationID, "application_id", json::REQUIRIED_FIELD),\n                json::pair                           (&AppCommand::name         , "name"          , json::REQUIRIED_FIELD),\n                json::pair                           (&AppCommand::description  , "description"   , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&AppCommand::options      , "options"       , json::OPTIONAL_FIELD ),\n                json::pair                           (&AppCommand::serverID     , "guild_id"      , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n\n    struct ServerAppCommandPermissions : IdentifiableDiscordObject<AppCommand> {\n        Snowflake<User> applicationID;\n        Snowflake<Server> serverID;\n        std::vector<AppCommand::Permissions> permissions;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&ServerAppCommandPermissions::ID           , "id"            , json::REQUIRIED_FIELD),\n                json::pair                           (&ServerAppCommandPermissions::applicationID, "application_id", json::REQUIRIED_FIELD),\n                json::pair                           (&ServerAppCommandPermissions::serverID     , "guild_id"      , json::REQUIRIED_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ServerAppCommandPermissions::permissions  , "permissions"   , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    template<>\n    struct GetDefault<AppCommand::Option::Default> {\n        static inline const AppCommand::Option::Default get() {\n            return AppCommand::Option::Default::Undefined;\n        }\n    };\n\n    template<>\n    inline void AppCommand::Option::Choice::set<decltype(nullptr)>(decltype(nullptr)&) {\n        value.SetNull();\n    }\n\n    template<>\n    inline void AppCommand::Option::Choice::set<json::Value>(json::Value& _val) {\n        value = _val; //moves\n    }\n\n    struct InteractionAppCommandCallbackData : public EditWebhookParams {\n        InteractionAppCommandCallbackData() = default;\n        InteractionAppCommandCallbackData(json::Value & json);\n        InteractionAppCommandCallbackData(const nonstd::string_view & json);\n\n        inline const bool empty() const { return content.empty() && embeds.empty() && components.empty(); }\n\n        bool tts = false;\n        enum class Flags : int {\n            NONE = 0,\n            Ephemeral = 64\n        } flags = Flags::NONE;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&InteractionAppCommandCallbackData::tts            , "tts"             , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionAppCommandCallbackData::content        , "content"         , json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&InteractionAppCommandCallbackData::embeds         , "embeds"          , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionAppCommandCallbackData::allowedMentions, "allowed_mentions", json::OPTIONAL_FIELD),\n                json::pair<json::EnumTypeHelper     >(&InteractionAppCommandCallbackData::flags          , "flags"           , json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&InteractionAppCommandCallbackData::components     , "components"      , json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    struct Interaction : IdentifiableDiscordObject<Interaction> {\n        Interaction() = default;\n        Interaction(json::Value & json);\n        Interaction(const nonstd::string_view & json);\n\n        enum class CallbackType : int {\n            NONE                             = 0, //made up type\n            Pong                             = 1,\n            Acknowledge                      = 2,\n            ChannelMessage                   = 3,\n            ChannelMessageWithSource         = 4,\n            DeferredChannelMessageWithSource = 5,\n            DeferredUpdateMessage            = 6,\n            UpdateMessage                    = 7,\n        };\n\n        struct Response : public DiscordObject {\n            Response() = default;\n            Response(json::Value & json);\n            Response(const nonstd::string_view & json);\n\n            using Type = CallbackType;\n            Type type;\n            InteractionAppCommandCallbackData data;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair<json::EnumTypeHelper>(&Interaction::Response::type, "type", json::REQUIRIED_FIELD),\n                    json::pair                      (&Interaction::Response::data, "data", json::OPTIONAL_FIELD )\n                );\n            JSONStructEnd\n        };\n\n        using AppCommandCallbackData = InteractionAppCommandCallbackData;\n        using Type = InteractionType;\n        InteractionType type;\n        Snowflake<DiscordObject> applicationID;\n        AppCommand::InteractionData data;\n        Snowflake<Server> serverID;\n        Snowflake<Channel> channelID;\n        ServerMember member;\n        User user;\n        std::string token;\n        int version = 1;\n        Message message;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                      (&Interaction::ID           , "id"            , json::REQUIRIED_FIELD),\n                json::pair                      (&Interaction::applicationID, "application_id", json::OPTIONAL_FIELD ),\n                json::pair<json::EnumTypeHelper>(&Interaction::type         , "type"          , json::REQUIRIED_FIELD),\n                json::pair                      (&Interaction::data         , "data"          , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::serverID     , "guild_id"      , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::channelID    , "channel_id"    , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::member       , "member"        , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::user         , "user"          , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::token        , "token"         , json::OPTIONAL_FIELD ),\n                json::pair<                   1>(&Interaction::version      , "version"       , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::message      , "message"       , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n\n}; // namespace SleepyDiscord\n')),Object(r.b)("hr",null),Object(r.b)("p",null,"Updated on 24 June 2021 at 00:06:42 UTC"))}l.isMDXComponent=!0},381:function(n,e,t){"use strict";t.d(e,"a",(function(){return d})),t.d(e,"b",(function(){return b}));var a=t(0),o=t.n(a);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=o.a.createContext({}),l=function(n){var e=o.a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},d=function(n){var e=l(n.components);return o.a.createElement(i.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return o.a.createElement(o.a.Fragment,{},e)}},u=o.a.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,s=n.parentName,i=c(n,["components","mdxType","originalType","parentName"]),d=l(t),u=a,b=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return t?o.a.createElement(b,p(p({ref:e},i),{},{components:t})):o.a.createElement(b,p({ref:e},i))}));function b(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,s=new Array(r);s[0]=u;var p={};for(var c in e)hasOwnProperty.call(e,c)&&(p[c]=e[c]);p.originalType=n,p.mdxType="string"==typeof n?n:a,s[1]=p;for(var i=2;i<r;i++)s[i]=t[i];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);