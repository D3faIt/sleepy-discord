(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{262:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return a})),r.d(n,"toc",(function(){return c})),r.d(n,"default",(function(){return d}));var o=r(3),t=r(7),s=(r(0),r(370)),i={title:"sleepy_discord/default_functions.cpp"},a={unversionedId:"reference/Files/default__functions_8cpp",id:"reference/Files/default__functions_8cpp",isDocsHomePage:!1,title:"sleepy_discord/default_functions.cpp",description:"Namespaces",source:"@site/docs/reference/Files/default__functions_8cpp.md",slug:"/reference/Files/default__functions_8cpp",permalink:"/sleepy-discord/docs/reference/Files/default__functions_8cpp",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/custom_udp_client.h",permalink:"/sleepy-discord/docs/reference/Files/custom__udp__client_8h"},next:{title:"include/sleepy_discord",permalink:"/sleepy-discord/docs/reference/Files/dir_7d6133b6519f2d9a153b125eeff6409d"}},c=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:c};function d(e){var n=e.components,r=Object(t.a)(e,["components"]);return Object(s.b)("wrapper",Object(o.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"namespaces"},"Namespaces"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(s.b)("h2",{id:"source-code"},"Source code"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'#include "client.h"\n\n#if _MSC_VER && !__INTEL_COMPILER\n#pragma warning( disable: 4100 ) //warns about unused parameters with names\n#pragma warning( disable: 4458 ) //warns about variables that hide class members\n#endif\n\nnamespace SleepyDiscord {\n    void BaseDiscordClient::onReady(Ready readyData) {\n\n    }\n\n    void BaseDiscordClient::onResumed() {\n\n    }\n\n    void BaseDiscordClient::onDeleteServer(UnavailableServer server) {\n\n    }\n\n    void BaseDiscordClient::onEditServer(Server server) {\n\n    }\n\n    void BaseDiscordClient::onBan(Snowflake<Server> serverID, User user) {\n\n    }\n\n    void BaseDiscordClient::onUnban(Snowflake<Server> serverID, User user) {\n\n    }\n\n    void BaseDiscordClient::onMember(Snowflake<Server> serverID, ServerMember member) {\n\n    }\n\n    void BaseDiscordClient::onRemoveMember(Snowflake<Server> serverID, User user) {\n\n    }\n\n\n    void BaseDiscordClient::onEditMember(Snowflake<Server> serverID, User user, std::vector<Snowflake<Role>> roles, std::string nick) {\n\n    }\n\n    void BaseDiscordClient::onRole(Snowflake<Server> serverID, Role role) {\n\n    }\n\n    void BaseDiscordClient::onDeleteRole(Snowflake<Server> serverID, Snowflake<Role> roleID) {\n\n    }\n\n    void BaseDiscordClient::onEditRole(Snowflake<Server> serverID, Role role) {\n\n    }\n\n    void BaseDiscordClient::onEditEmojis(Snowflake<Server> serverID, std::vector<Emoji> emojis) {\n\n    }\n\n    void BaseDiscordClient::onMemberChunk(ServerMembersChunk memberChunk) {\n\n    }\n\n    void BaseDiscordClient::onDeleteChannel(Channel channel) {\n\n    }\n\n    void BaseDiscordClient::onEditChannel(Channel channel) {\n\n    }\n\n    void BaseDiscordClient::onPinMessage(Snowflake<Channel> channelID, std::string lastPinTimestamp) {\n\n    }\n\n    void BaseDiscordClient::onPresenceUpdate(PresenceUpdate presenseUpdate) {\n\n    }\n\n    void BaseDiscordClient::onEditUser(User user) {\n\n    }\n\n\n    void BaseDiscordClient::onEditUserSettings(const json::Value& jsonMessage) {\n\n    }\n\n    void BaseDiscordClient::onEditVoiceState(VoiceState& state) {\n\n    }\n\n    void BaseDiscordClient::onTyping(Snowflake<Channel> channelID, Snowflake<User> userID, time_t timestamp) {\n\n    }\n\n    void BaseDiscordClient::onDeleteMessages(Snowflake<Channel> channelID, std::vector<Snowflake<Message>> messages) {\n\n    }\n\n    void BaseDiscordClient::onEditMessage(MessageRevisions revisioins) {\n\n    }\n\n    void BaseDiscordClient::onEditVoiceServer(VoiceServerUpdate& voiceServerUpdate) {\n\n    }\n\n    void BaseDiscordClient::onReaction(Snowflake<User> userID, Snowflake<Channel> channelID, Snowflake<Message> messageID, Emoji emoji) {\n\n    }\n\n    void BaseDiscordClient::onDeleteReaction(Snowflake<User> userID, Snowflake<Channel> channelID, Snowflake<Message> messageID, Emoji emoji) {\n\n    }\n\n    void BaseDiscordClient::onDeleteAllReaction(Snowflake<Server> serverID, Snowflake<Channel> channelID, Snowflake<Message> messageID) {\n\n    }\n\n    void BaseDiscordClient::onMessage(Message message) {\n        \n    }\n\n    void BaseDiscordClient::onHeartbeat() {\n\n    }\n\n    void BaseDiscordClient::onHeartbeatAck() {\n\n    }\n\n    void BaseDiscordClient::onServer(Server jsonMessage) {\n    \n    }\n\n    void BaseDiscordClient::onChannel(Channel channel) {\n\n    }\n\n    void BaseDiscordClient::onUnknownEvent(std::string name, const json::Value& data) {\n\n    }\n\n    void BaseDiscordClient::onDispatch(const json::Value& jsonMessage) {\n\n    }\n\n    void BaseDiscordClient::onInvaldSession() {\n\n    }\n\n    void BaseDiscordClient::onDisconnect() {\n\n    }\n\n    void BaseDiscordClient::onResume() {\n\n    }\n\n    void BaseDiscordClient::runAsync() {\n\n    }\n\n    void BaseDiscordClient::run() {\n\n    }\n\n    void BaseDiscordClient::onQuit() {\n\n    }\n\n    void SleepyDiscord::BaseDiscordClient::onResponse(Response response) {\n    }\n\n    void BaseDiscordClient::sleep(const unsigned int milliseconds) {\n    \n    }\n    \n    void BaseDiscordClient::fileRead(const char* path, std::string*const file) {\n\n    }\n\n    void BaseDiscordClient::tick(float deltaTime) {\n    \n    }\n    \n    void BaseDiscordClient::onError(ErrorCode errorCode, std::string errorMessage) {\n        \n    }\n\n    Timer BaseDiscordClient::schedule(TimedTask code, const time_t millisecondsTilDueTime) {\n        return Timer([]() {});\n    }\n}\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Updated on 13 May 2021 at 01:04:54 UTC"))}d.isMDXComponent=!0},370:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return f}));var o=r(0),t=r.n(o);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=t.a.createContext({}),d=function(e){var n=t.a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=d(e.components);return t.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},v=t.a.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(r),v=o,f=p["".concat(i,".").concat(v)]||p[v]||u[v]||s;return r?t.a.createElement(f,a(a({ref:n},l),{},{components:r})):t.a.createElement(f,a({ref:n},l))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=v;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=r[l];return t.a.createElement.apply(null,i)}return t.a.createElement.apply(null,r)}v.displayName="MDXCreateElement"}}]);