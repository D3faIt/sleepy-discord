(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{129:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),c=n(7),a=(n(0),n(364)),l={title:"SleepyDiscord::json::ClassTypeHelper"},o={unversionedId:"reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper",id:"reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper",isDocsHomePage:!1,title:"SleepyDiscord::json::ClassTypeHelper",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper.md",slug:"/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper",version:"current",sidebar:"Reference",previous:{title:"SleepyDiscord::json::BaseEnumTypeHelper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_base_enum_type_helper"},next:{title:"SleepyDiscord::json::ClassTypeHelper< Value >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01_value_01_4"}},s=[{value:"Detailed Description",id:"detailed-description",children:[]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function toType",id:"function-totype",children:[]},{value:"function fromType",id:"function-fromtype",children:[]},{value:"function fromType",id:"function-fromtype-1",children:[]},{value:"function isType",id:"function-istype",children:[]},{value:"function isType",id:"function-istype-1",children:[]}]}],i={toc:s};function p(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null," ",Object(a.b)("a",{parentName:"p",href:"#detailed-description"},"More...")),Object(a.b)("h2",{id:"detailed-description"},"Detailed Description"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Type >\nstruct SleepyDiscord::json::ClassTypeHelper;\n")),Object(a.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(a.b)("h3",{id:"function-totype"},"function toType"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Value >\nstatic inline Type toType(\n    Value & value\n)\n")),Object(a.b)("h3",{id:"function-fromtype"},"function fromType"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class T >\nstatic inline std::enable_if< hasSerialize< T >::value, Value >::type fromType(\n    const T & value,\n    Value::AllocatorType & allocator\n)\n")),Object(a.b)("h3",{id:"function-fromtype-1"},"function fromType"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class T >\nstatic inline std::enable_if< hasSerialize< T >::value==false, Value >::type fromType(\n    const T & value,\n    Value::AllocatorType & allocator\n)\n")),Object(a.b)("h3",{id:"function-istype"},"function isType"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class T  =Type>\nstatic inline std::enable_if< hasIsType< T >::value, bool >::type isType(\n    const Value & value\n)\n")),Object(a.b)("h3",{id:"function-istype-1"},"function isType"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class T  =Type>\nstatic inline std::enable_if<!hasIsType< T >::value, bool >::type isType(\n    const Value & value\n)\n")),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on 30 April 2021 at 21:51:50 UTC"))}p.isMDXComponent=!0},364:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),c=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=c.a.createContext({}),p=function(e){var t=c.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return c.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},y=c.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,f=u["".concat(l,".").concat(y)]||u[y]||d[y]||a;return n?c.a.createElement(f,o(o({ref:t},i),{},{components:n})):c.a.createElement(f,o({ref:t},i))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var i=2;i<a;i++)l[i]=n[i];return c.a.createElement.apply(null,l)}return c.a.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);