(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{381:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},i=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),i=p(n),d=r,m=i["".concat(o,".").concat(d)]||i[d]||u[d]||c;return n?a.a.createElement(m,b(b({ref:t},s),{},{components:n})):a.a.createElement(m,b({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=d;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:r,o[1]=b;for(var s=2;s<c;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),c=(n(0),n(381)),o={title:"SleepyDiscord::Button"},b={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_button",id:"reference/Classes/struct_sleepy_discord_1_1_button",isDocsHomePage:!1,title:"SleepyDiscord::Button",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_button.md",slug:"/reference/Classes/struct_sleepy_discord_1_1_button",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_button",version:"current",sidebar:"Reference",previous:{title:"SleepyDiscord::BooleanResponse",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_boolean_response"},next:{title:"SleepyDiscord::Cache",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_cache"}},l=[{value:"inherited members",id:"inherited-members",children:[]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Button",id:"function-button",children:[]},{value:"function ~Button",id:"function-button-1",children:[]},{value:"function Button",id:"function-button-2",children:[]},{value:"function Button",id:"function-button-3",children:[]},{value:"function std::tuple_cat",id:"function-stdtuple_cat",children:[]}]},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable componentType",id:"variable-componenttype",children:[]},{value:"variable style",id:"variable-style",children:[]},{value:"variable label",id:"variable-label",children:[]},{value:"variable emoji",id:"variable-emoji",children:[]},{value:"variable customID",id:"variable-customid",children:[]},{value:"variable url",id:"variable-url",children:[]},{value:"variable disabled",id:"variable-disabled",children:[]}]}],s={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Inherits from ",Object(c.b)("a",{parentName:"p",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp"},"SleepyDiscord::ComponentTemp< Button >"),", ",Object(c.b)("a",{parentName:"p",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"),", ",Object(c.b)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),Object(c.b)("h2",{id:"inherited-members"},"inherited members"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Public Functions inherited from ",Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp"},"SleepyDiscord::ComponentTemp< Button >"))),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-componenttemp"},"ComponentTemp")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-~componenttemp"},"~ComponentTemp")),"() =default")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-operator-jsonvalue"},"operator json::Value")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-operator-rawcomponent"},"operator RawComponent")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"JSONStructStart"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-stdmake_tuple"},"std::make_tuple")),"(json::pair< ",Object(c.b)("a",{parentName:"td",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_enum_type_helper"},"json::EnumTypeHelper"),' > &::, "", ::REQUIRIED_FIELD )')))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Public Types inherited from ",Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"using ComponentType"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#using-type"},"Type")))))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Public Functions inherited from ",Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-basecomponent"},"BaseComponent")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-basecomponent"},"BaseComponent")),"(Type _type)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-~basecomponent"},"~BaseComponent")),"() =default")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const ComponentType"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-gettype"},"getType")),"() const")))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Protected Attributes inherited from ",Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Type"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#variable-type"},"type")))))),Object(c.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(c.b)("h3",{id:"function-button"},"function Button"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"Button() =default\n")),Object(c.b)("h3",{id:"function-button-1"},"function ~Button"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"~Button() =default\n")),Object(c.b)("h3",{id:"function-button-2"},"function Button"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"Button(\n    const json::Value & json\n)\n")),Object(c.b)("h3",{id:"function-button-3"},"function Button"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"Button(\n    const nonstd::string_view & json\n)\n")),Object(c.b)("h3",{id:"function-stdtuple_cat"},"function std::tuple_cat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},'JSONStructStart std::tuple_cat(\n    ComponentTemp< Button >::JSONStruct ,\n    std::make_tuple(json::pair< json::EnumTypeHelper >(&Button::style, "style", json::REQUIRIED_FIELD), json::pair(&Button::label, "label", json::OPTIONAL_FIELD), json::pair(&Button::emoji, "emoji", json::OPTIONAL_FIELD), json::pair(&Button::customID, "custom_id", json::OPTIONAL_FIELD), json::pair(&Button::url, "url", json::OPTIONAL_FIELD), json::pair(&Button::disabled, "disabled", json::OPTIONAL_FIELD)) \n)\n')),Object(c.b)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),Object(c.b)("h3",{id:"variable-componenttype"},"variable componentType"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"static const ComponentType componentType = ComponentType::Button;\n")),Object(c.b)("h3",{id:"variable-style"},"variable style"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"ButtonStyle style;\n")),Object(c.b)("h3",{id:"variable-label"},"variable label"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"std::string label;\n")),Object(c.b)("h3",{id:"variable-emoji"},"variable emoji"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"Emoji emoji;\n")),Object(c.b)("h3",{id:"variable-customid"},"variable customID"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"std::string customID;\n")),Object(c.b)("h3",{id:"variable-url"},"variable url"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"std::string url;\n")),Object(c.b)("h3",{id:"variable-disabled"},"variable disabled"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"bool disabled = false;\n")),Object(c.b)("hr",null),Object(c.b)("p",null,"Updated on 20 June 2021 at 01:46:37 UTC"))}p.isMDXComponent=!0}}]);