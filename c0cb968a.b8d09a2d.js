(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{277:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),c=(n(0),n(366)),o={title:"SleepyDiscord::json::ArrayWrapper"},i={unversionedId:"reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",id:"reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",isDocsHomePage:!1,title:"SleepyDiscord::json::ArrayWrapper",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper.md",slug:"/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",version:"current",sidebar:"Reference",previous:{title:"SleepyDiscord::json::ArrayValueWrapper< Type, typename std::enable_if< std::is_constructible< Type, const Value >::value >::type >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_value_wrapper_3_01_type_00_01typename_01std_1_1enable__ic278f49c55d1ff83c8431dd68b94506f"},next:{title:"SleepyDiscord::json::ArrayWrapper< Value, Base >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper_3_01_value_00_01_base_01_4"}},l=[{value:"Detailed Description",id:"detailed-description",children:[]},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using base",id:"using-base",children:[]},{value:"using DocType",id:"using-doctype",children:[]}]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function get",id:"function-get",children:[]},{value:"function get",id:"function-get-1",children:[]},{value:"function get",id:"function-get-2",children:[]},{value:"function get",id:"function-get-3",children:[]},{value:"function get",id:"function-get-4",children:[]},{value:"function get",id:"function-get-5",children:[]},{value:"function get",id:"function-get-6",children:[]},{value:"function vector",id:"function-vector",children:[]},{value:"function list",id:"function-list",children:[]},{value:"function cArray",id:"function-carray",children:[]},{value:"function operator Values",id:"function-operator-values",children:[]},{value:"function operator std::vector&lt; TypeToConvertTo &gt;",id:"function-operator-stdvector-typetoconvertto-",children:[]},{value:"function operator std::list&lt; TypeToConvertTo &gt;",id:"function-operator-stdlist-typetoconvertto-",children:[]}]}],p={toc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null," ",Object(c.b)("a",{parentName:"p",href:"#detailed-description"},"More...")),Object(c.b)("p",null,"Inherits from typename ArrayValueWrapper::type< TypeToConvertTo >"),Object(c.b)("h2",{id:"detailed-description"},"Detailed Description"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class TypeToConvertTo ,\nclass Base  =typename ArrayValueWrapper<TypeToConvertTo>::type>\nstruct SleepyDiscord::json::ArrayWrapper;\n")),Object(c.b)("h2",{id:"public-types-documentation"},"Public Types Documentation"),Object(c.b)("h3",{id:"using-base"},"using base"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ArrayWrapper< TypeToConvertTo, Base >::base =  Base;\n")),Object(c.b)("h3",{id:"using-doctype"},"using DocType"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ArrayWrapper< TypeToConvertTo, Base >::DocType =  decltype(((Base*)nullptr)->getDoc());\n")),Object(c.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(c.b)("h3",{id:"function-get"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Value >\nstatic inline Container get(\n    Value & value,\n    std::true_type \n)\n")),Object(c.b)("h3",{id:"function-get-1"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Value >\nstatic inline Container get(\n    Value && value,\n    std::false_type \n)\n")),Object(c.b)("h3",{id:"function-get-2"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Value >\nstatic inline Container get(\n    Value && value\n)\n")),Object(c.b)("h3",{id:"function-get-3"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline Container get()\n")),Object(c.b)("h3",{id:"function-get-4"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type  =TypeToConvertTo>\ninline Container< Type > get()\n")),Object(c.b)("h3",{id:"function-get-5"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline bool get(\n    Container & value\n)\n")),Object(c.b)("h3",{id:"function-get-6"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type  =TypeToConvertTo>\ninline bool get(\n    Container< Type > & value\n)\n")),Object(c.b)("h3",{id:"function-vector"},"function vector"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::vector< TypeToConvertTo > vector()\n")),Object(c.b)("h3",{id:"function-list"},"function list"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::list< TypeToConvertTo > list()\n")),Object(c.b)("h3",{id:"function-carray"},"function cArray"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline TypeToConvertTo * cArray()\n")),Object(c.b)("h3",{id:"function-operator-values"},"function operator Values"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator Values()\n")),Object(c.b)("h3",{id:"function-operator-stdvector-typetoconvertto-"},"function operator std::vector< TypeToConvertTo >"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator std::vector< TypeToConvertTo >()\n")),Object(c.b)("h3",{id:"function-operator-stdlist-typetoconvertto-"},"function operator std::list< TypeToConvertTo >"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator std::list< TypeToConvertTo >()\n")),Object(c.b)("hr",null),Object(c.b)("p",null,"Updated on 10 May 2021 at 23:07:32 UTC"))}s.isMDXComponent=!0},366:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return y}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),b=r,y=u["".concat(o,".").concat(b)]||u[b]||d[b]||c;return n?a.a.createElement(y,i(i({ref:t},p),{},{components:n})):a.a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<c;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);