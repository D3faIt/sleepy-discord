(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{293:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return a})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var s=t(3),o=t(7),r=(t(0),t(381)),c={title:"sleepy_discord/message.cpp"},a={unversionedId:"reference/Files/message_8cpp",id:"reference/Files/message_8cpp",isDocsHomePage:!1,title:"sleepy_discord/message.cpp",description:"Namespaces",source:"@site/docs/reference/Files/message_8cpp.md",slug:"/reference/Files/message_8cpp",permalink:"/sleepy-discord/docs/reference/Files/message_8cpp",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/json_wrapper.h",permalink:"/sleepy-discord/docs/reference/Files/json__wrapper_8h"},next:{title:"include/sleepy_discord/message.h",permalink:"/sleepy-discord/docs/reference/Files/message_8h"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:i};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"namespaces"},"Namespaces"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(r.b)("h2",{id:"source-code"},"Source code"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'#include "message.h"\n#include "client.h"\n\nnamespace SleepyDiscord {\n    Message::Message(json::Value& json) :\n        Message(json::fromJSON<Message>(json))\n    {}\n\n    Message::Message(const nonstd::string_view& json) :\n        Message(json::fromJSON<Message>(json))\n    {}\n\n    bool Message::startsWith(const std::string& test) {\n        return content.compare(0, test.length(), test) == 0;\n    }\n\n    std::size_t Message::length() {\n        return content.length();\n    }\n\n    bool Message::isMentioned(Snowflake<User> userID) {\n        std::size_t size = mentions.size();\n        for (std::size_t i = 0; i < size; i++)\n            if (mentions[i].ID == userID) return true;\n        return false;\n    }\n\n    bool Message::isMentioned(User& _user) {\n        return isMentioned(_user.ID);\n    }\n\n    Message Message::send(BaseDiscordClient* client) {\n        return client->sendMessage(channelID, content, !embeds.empty() ? embeds[0] : Embed(), messageReference, static_cast<TTS>(tts));\n    }\n\n    Message Message::reply(BaseDiscordClient * client, std::string message, Embed embed)\n    {\n        return client->sendMessage(channelID, message, embed);\n    }\n\n    Message::Interaction::Interaction(const json::Value& json) :\n        Interaction(json::fromJSON<Message::Interaction>(json))\n    {}\n\n    Message::Interaction::Interaction(const nonstd::string_view& json) :\n        Interaction(json::fromJSON<Message::Interaction>(json))\n    {}\n\n    Emoji::~Emoji() {\n    }\n\n    Emoji::Emoji(const json::Value& json) :\n        Emoji(json::fromJSON<Emoji>(json)) {\n    }\n\n    Emoji::Emoji(const nonstd::string_view& json) :\n        Emoji(json::fromJSON<Emoji>(json)) {\n    }\n\n    Reaction::~Reaction() {\n    }\n\n    Reaction::Reaction(const json::Value& json) :\n        Reaction(json::fromJSON<Reaction>(json)) {\n    }\n\n    Reaction::Reaction(const nonstd::string_view& json) :\n        Reaction(json::fromJSON<Reaction>(json)) {\n    }\n\n    StickerPack::~StickerPack() {}\n    StickerPack::StickerPack(const json::Value & json):\n        StickerPack(json::fromJSON<StickerPack>(json))\n    {}\n    StickerPack::StickerPack(const nonstd::string_view & json):\n        StickerPack(json::fromJSON<StickerPack>(json))\n    {}\n\n    Sticker::~Sticker() {}\n    Sticker::Sticker(const json::Value & json):\n        Sticker(json::fromJSON<Sticker>(json))\n    {}\n    Sticker::Sticker(const nonstd::string_view & json):\n        Sticker(json::fromJSON<Sticker>(json))\n    {}\n\n    MessageReference::MessageReference(const json::Value & json):\n        MessageReference(json::fromJSON<MessageReference>(json))\n    {}\n    MessageReference::MessageReference(const nonstd::string_view & json):\n        MessageReference(json::fromJSON<MessageReference>(json))\n    {}\n    AllowedMentions::AllowedMentions(const json::Value & json):\n        AllowedMentions(json::fromJSON<AllowedMentions>(json))\n    {}\n    AllowedMentions::AllowedMentions(const nonstd::string_view & json):\n        AllowedMentions(json::fromJSON<AllowedMentions>(json))\n    {}\n\n    ActionRow::ActionRow(json::Value& json) :\n        ActionRow(json::fromJSON<ActionRow>(json))\n    {}\n    ActionRow::ActionRow(const nonstd::string_view& json) :\n        ActionRow(json::fromJSON<ActionRow>(json))\n    {}\n    Button::Button(const json::Value& json) :\n        Button(json::fromJSON<Button>(json))\n    {}\n    Button::Button(const nonstd::string_view& json) :\n        Button(json::fromJSON<Button>(json))\n    {}\n\n    RawComponent::RawComponent(const nonstd::string_view& json) :\n        RawComponent(json::parse(json))\n    {}\n}\n')),Object(r.b)("hr",null),Object(r.b)("p",null,"Updated on  3 June 2021 at 00:40:36 UTC"))}p.isMDXComponent=!0},381:function(e,n,t){"use strict";t.d(n,"a",(function(){return j})),t.d(n,"b",(function(){return m}));var s=t(0),o=t.n(s);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},j=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),j=p(t),u=s,m=j["".concat(c,".").concat(u)]||j[u]||d[u]||r;return t?o.a.createElement(m,a(a({ref:n},l),{},{components:t})):o.a.createElement(m,a({ref:n},l))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,c=new Array(r);c[0]=u;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a.mdxType="string"==typeof e?e:s,c[1]=a;for(var l=2;l<r;l++)c[l]=t[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);