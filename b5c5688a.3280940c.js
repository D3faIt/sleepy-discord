(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{282:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return b}));var r=n(3),c=n(7),a=(n(0),n(393)),s={title:"include/sleepy_discord/discord_object_interface.h"},i={unversionedId:"reference/Files/discord__object__interface_8h",id:"reference/Files/discord__object__interface_8h",isDocsHomePage:!1,title:"include/sleepy_discord/discord_object_interface.h",description:"Namespaces",source:"@site/docs/reference/Files/discord__object__interface_8h.md",slug:"/reference/Files/discord__object__interface_8h",permalink:"/sleepy-discord/docs/reference/Files/discord__object__interface_8h",version:"current",sidebar:"Reference",previous:{title:"sleepy_discord",permalink:"/sleepy-discord/docs/reference/Files/dir_e8fa4e2dbc3cb0510f69ea6b27e9c04c"},next:{title:"sleepy_discord/embed.cpp",permalink:"/sleepy-discord/docs/reference/Files/embed_8cpp"}},o=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function index",id:"function-index",children:[]},{value:"function JSON_getArray",id:"function-json_getarray",children:[]},{value:"function JSON_getArray",id:"function-json_getarray-1",children:[]},{value:"function JSON_getList",id:"function-json_getlist",children:[]}]},{value:"Source code",id:"source-code",children:[]}],l={toc:o};function b(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"namespaces"},"Namespaces"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(a.b)("h2",{id:"classes"},"Classes"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"class"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"struct"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_empty_discord_object"},"SleepyDiscord::EmptyDiscordObject")))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"class"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_identifiable_discord_object"},"SleepyDiscord::IdentifiableDiscordObject")))))),Object(a.b)("h2",{id:"functions"},"Functions"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <template< class... > class Container,typename Type ",">"," ",Object(a.b)("br",null),"constexpr unsigned int"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-index"},"index")),"(Container< Type ",Object(a.b)("em",{parentName:"td"},"const > names, Type ")," name, unsigned int i =0)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <class _DiscordObject ",">"," ",Object(a.b)("br",null),"std::vector< _DiscordObject >"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getarray"},"JSON_getArray")),"(const std::string * _source)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <class _DiscordObject ,class Type ",">"," ",Object(a.b)("br",null),"std::vector< _DiscordObject >"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getarray"},"JSON_getArray")),"(const Type & _source)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <class _DiscordObject ,class Type ",">"," ",Object(a.b)("br",null),"std::list< _DiscordObject >"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getlist"},"JSON_getList")),"(const Type & _source)")))),Object(a.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(a.b)("h3",{id:"function-index"},"function index"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type >\nconstexpr unsigned int index(\n    Container< Type *const > names,\n    Type * name,\n    unsigned int i =0\n)\n")),Object(a.b)("h3",{id:"function-json_getarray"},"function JSON_getArray"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject >\nstd::vector< _DiscordObject > JSON_getArray(\n    const std::string * _source\n)\n")),Object(a.b)("h3",{id:"function-json_getarray-1"},"function JSON_getArray"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject ,\nclass Type >\ninline std::vector< _DiscordObject > JSON_getArray(\n    const Type & _source\n)\n")),Object(a.b)("h3",{id:"function-json_getlist"},"function JSON_getList"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject ,\nclass Type >\ninline std::list< _DiscordObject > JSON_getList(\n    const Type & _source\n)\n")),Object(a.b)("h2",{id:"source-code"},"Source code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <list>\n#include "json_wrapper.h"\n#include "snowflake.h"\n#include "error.h"\n#include "http.h"\n\nnamespace SleepyDiscord {\n    class BaseDiscordClient;\n\n    class DiscordObject {\n\n    };\n\n    struct EmptyDiscordObject {\n        EmptyDiscordObject() = default;\n        EmptyDiscordObject(const nonstd::string_view& rawJSON) :\n            EmptyDiscordObject(json::fromJSON<EmptyDiscordObject>(rawJSON)) {}\n        EmptyDiscordObject(const json::Value & json) :\n            EmptyDiscordObject(json::fromJSON<EmptyDiscordObject>(json)) {}\n\n        JSONStructStart\n            std::make_tuple();\n        JSONStructEnd\n    };\n\n    template <class Derived>\n    class IdentifiableDiscordObject : public DiscordObject {\n    public:\n        IdentifiableDiscordObject() = default;\n        IdentifiableDiscordObject(Snowflake<Derived> id) : ID(id) {}\n\n        using Parent = IdentifiableDiscordObject<Derived>;\n\n        Snowflake<Derived> ID;\n        \n        inline operator Snowflake<Derived>&() {\n            return ID;\n        }\n\n        inline bool empty() const {\n            return ID.empty();\n        }\n\n        void merge(Derived& changes) {\n            json::mergeObj(*this, changes);\n        }\n\n        template<class DiscordObject>\n        inline bool operator==(const Snowflake<DiscordObject>& right) const {\n            return ID == static_cast<Snowflake<DiscordObject>>(right);\n        }\n        \n        template<class DiscordObject>\n        inline bool operator!=(const Snowflake<DiscordObject>& right) const {\n            return ID != static_cast<Snowflake<DiscordObject>>(right);\n        }\n\n        inline bool operator==(const Snowflake<Derived>& right) const {\n            return operator==<Derived>(right);\n        }\n\n        inline bool operator!=(const Snowflake<Derived>& right) const {\n            return operator!=<Derived>(right);\n        }\n\n        inline bool operator==(const IdentifiableDiscordObject<Derived>& right) const {\n            return ID == right.ID;\n        }\n\n        inline bool operator!=(const IdentifiableDiscordObject<Derived>& right) const {\n            return ID != right.ID;\n        }\n\n        inline const Time getTimestamp() {\n            return ID.timestamp();\n        }\n    };\n\n    //constexpr unsigned int index(std::initializer_list<const char *const> names, const char * name, unsigned int i = 0) {\n    //  for (const char *const n : names)\n    //      if (strcmp(n, name) != 0) ++i;\n    //      else break;\n    //  return i;\n    //}//sadly this doesn\'t work on c++11, leaving this here for the future\n\n    template <template<class...> class Container, typename Type> //forces this be done at compile time, I think, and hope it does\n    constexpr unsigned int index(Container<Type*const> names, Type * name, unsigned int i = 0) {\n        return i + names.begin() != names.end() && strcmp(*(i + names.begin()), name) != 0 ? index(names, name, i + 1) : i;\n    }\n\n    template <class _DiscordObject>\n    std::vector<_DiscordObject> JSON_getArray(const std::string* _source) {\n        return json::ArrayWrapper<_DiscordObject>(*_source);\n    }\n\n    //somethings I need it to be a reference\n    template <class _DiscordObject, class Type>\n    inline std::vector<_DiscordObject> JSON_getArray(const Type& _source) {\n        return json::ArrayWrapper<_DiscordObject>(_source);\n    }\n\n    template <class _DiscordObject, class Type>\n    inline std::list<_DiscordObject> JSON_getList(const Type& _source) {\n        return json::ArrayWrapper<_DiscordObject>(_source);\n    }\n}\n')),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on 26 November 2021 at 18:07:04 UTC"))}b.isMDXComponent=!0},393:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),c=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var l=c.a.createContext({}),b=function(e){var t=c.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=b(e.components);return c.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},u=c.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=b(n),u=r,m=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?c.a.createElement(m,i(i({ref:t},l),{},{components:n})):c.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return c.a.createElement.apply(null,s)}return c.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);