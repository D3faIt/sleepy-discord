"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3436],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),f=i,_=p["".concat(l,".").concat(f)]||p[f]||u[f]||a;return t?r.createElement(_,o(o({ref:n},s),{},{components:t})):r.createElement(_,o({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1432:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],c={title:"sleepy_discord/asio_udp.cpp"},l=void 0,d={unversionedId:"reference/Files/asio__udp_8cpp",id:"reference/Files/asio__udp_8cpp",title:"sleepy_discord/asio_udp.cpp",description:"Namespaces",source:"@site/docs/reference/Files/asio__udp_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/asio__udp_8cpp",permalink:"/sleepy-discord/docs/reference/Files/asio__udp_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/asio_udp.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/asio_schedule.h",permalink:"/sleepy-discord/docs/reference/Files/asio__schedule_8h"},next:{title:"include/sleepy_discord/asio_udp.h",permalink:"/sleepy-discord/docs/reference/Files/asio__udp_8h"}},s=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function handle_send",id:"function-handle_send",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],u={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/docs/reference/Files/asio__udp_8cpp#function-handle_send"},"handle_send")),"(const std::error_code & , std::size_t , GenericUDPClient::SendHandler handler)")))),(0,a.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,a.kt)("h3",{id:"function-handle_send"},"function handle_send"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void handle_send(\n    const std::error_code & ,\n    std::size_t ,\n    GenericUDPClient::SendHandler handler\n)\n")),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "asio_udp.h"\n#ifndef NONEXISTENT_ASIO\n\n#include "client.h"\n\nnamespace SleepyDiscord {\n    //Note: you need to be using a ASIOBasedScheduleHandler for this to work\n    ASIOUDPClient::ASIOUDPClient(BaseDiscordClient& client) :\n        ASIOUDPClient(static_cast<ASIOBasedScheduleHandler&>(client.getScheduleHandler()).getIOService())\n    {}\n\n    ASIOUDPClient::ASIOUDPClient(asio::io_service& service) :\n        iOService(&service),\n        uDPSocket(*iOService, asio::ip::udp::endpoint(asio::ip::udp::v4(), 0)),\n        resolver (*iOService)\n    {\n\n    }\n\n    bool ASIOUDPClient::connect(const std::string & to, const uint16_t port) {\n        if (iOService == nullptr) return false;\n        endpoint = *resolver.resolve({ asio::ip::udp::v4(), to, std::to_string(port) });\n        return true;\n    }\n\n    void handle_send(\n        const std::error_code& /*error*/,\n        std::size_t /*bytes_transferred*/,\n        GenericUDPClient::SendHandler handler\n    ) {\n        handler();\n    }\n\n    void ASIOUDPClient::send(\n        const uint8_t* _buffer,\n        size_t bufferLength,\n        SendHandler handler\n    ) {\n        if (iOService == nullptr) return;\n        uDPSocket.async_send_to(asio::buffer(_buffer, bufferLength), endpoint,\n            std::bind(&handle_send, std::placeholders::_1, std::placeholders::_2, handler)\n        );\n    }\n\n    void ASIOUDPClient::receive(ReceiveHandler handler) {\n        if (iOService == nullptr) return;\n        uDPSocket.async_receive_from(asio::buffer(buffer, bufferSize), endpoint, 0,\n            std::bind(\n                &ASIOUDPClient::handle_receive, this, std::placeholders::_1,\n                std::placeholders::_2, handler\n            )\n        );\n    }\n\n    void ASIOUDPClient::handle_receive(\n        const std::error_code& /*error*/,\n        std::size_t bytes_transferred,\n        ReceiveHandler handler\n    ) {\n        handler(std::vector<uint8_t>(buffer, buffer + bytes_transferred));\n    }\n};\n\n#endif\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on  2 January 2022 at 00:25:08 UTC"))}p.isMDXComponent=!0}}]);