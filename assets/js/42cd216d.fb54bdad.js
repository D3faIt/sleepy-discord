"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7835],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),i=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(t),m=s,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var i=2;i<a;i++)o[i]=t[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5507:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var r=t(3117),s=t(102),a=(t(7294),t(3905)),o=["components"],l={title:"include/sleepy_discord/cpr_session.h"},c=void 0,i={unversionedId:"reference/Files/cpr__session_8h",id:"reference/Files/cpr__session_8h",title:"include/sleepy_discord/cpr_session.h",description:"Namespaces",source:"@site/docs/reference/Files/cpr__session_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/cpr__session_8h",permalink:"/sleepy-discord/docs/reference/Files/cpr__session_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/cpr_session.h"},sidebar:"Reference",previous:{title:"sleepy_discord/cpr_session.cpp",permalink:"/sleepy-discord/docs/reference/Files/cpr__session_8cpp"},next:{title:"include/sleepy_discord/custom_connection.h",permalink:"/sleepy-discord/docs/reference/Files/custom__connection_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef Session",id:"typedef-session",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"class"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_c_p_r_session"},"SleepyDiscord::CPRSession")))))),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"typedef CPRSession"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/cpr__session_8h#typedef-session"},"Session")))))),(0,a.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,a.kt)("h3",{id:"typedef-session"},"typedef Session"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef CustomSession SleepyDiscord::Session;\n")),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n\n#if defined(SLEEPY_DISCORD_CMAKE)\n    #if defined(EXISTENT_CPR)\n        #include <cpr/cpr.h>\n    #else\n        #define NONEXISTENT_CPR\n    #endif\n#else\n    #include <cpr/cpr.h>\n#endif\n\n#ifndef NONEXISTENT_CPR\n#include "http.h"\n\nnamespace SleepyDiscord {\n    class CPRSession : public GenericSession {\n    public:\n        inline void setUrl(const std::string& url) {\n            session.SetUrl(cpr::Url{ url });\n        }\n        inline void setBody(const std::string* jsonParameters) {\n            session.SetBody(cpr::Body{ *jsonParameters });\n        }\n        void setHeader(const std::vector<HeaderPair>& header);\n        void setMultipart(const std::vector<Part>& parts);\n        void setResponseCallback(const ResponseCallback& callback) {\n            responseCallback = callback;\n        }\n        Response request(RequestMethod method);\n    private:\n        Response perform(RequestMethod method);\n        cpr::Session session;\n        //muiltpart is needs to be here when uploading images,\n        //so that it\'s not deallocated when making the request\n        cpr::Multipart muiltpart = {};\n        ResponseCallback responseCallback;\n    };\n\n    typedef CPRSession Session;\n}\n\n#endif\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on  4 March 2022 at 12:37:36 UTC"))}u.isMDXComponent=!0}}]);