"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3239],{3905:function(e,n,t){t.d(n,{Zo:function(){return i},kt:function(){return d}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=r.createContext({}),a=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},i=function(e){var n=a(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),_=a(t),d=s,y=_["".concat(p,".").concat(d)]||_[d]||u[d]||o;return t?r.createElement(y,c(c({ref:n},i),{},{components:t})):r.createElement(y,c({ref:n},i))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,c=new Array(o);c[0]=_;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:s,c[1]=l;for(var a=2;a<o;a++)c[a]=t[a];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},5563:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return a},toc:function(){return i},default:function(){return _}});var r=t(3117),s=t(102),o=(t(7294),t(3905)),c=["components"],l={title:"SleepyDiscord::json::ClassTypeHelper< std::shared_ptr< BaseComponent > >"},p=void 0,a={unversionedId:"reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1shared__ptr_3_01_base_component_01_4_01_4",id:"reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1shared__ptr_3_01_base_component_01_4_01_4",title:"SleepyDiscord::json::ClassTypeHelper< std::shared_ptr< BaseComponent > >",description:"Public Types Documentation",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1shared__ptr_3_01_base_component_01_4_01_4.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1shared__ptr_3_01_base_component_01_4_01_4",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1shared__ptr_3_01_base_component_01_4_01_4",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::json::ClassTypeHelper< std::shared_ptr< BaseComponent > >"},sidebar:"Reference",previous:{title:"SleepyDiscord::json::ClassTypeHelper< std::nullptr_t >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1nullptr__t_01_4"},next:{title:"SleepyDiscord::json::ClassTypeHelper< std::string >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1string_01_4"}},i=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Base",id:"using-base",children:[],level:3},{value:"using Type",id:"using-type",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function toType",id:"function-totype",children:[],level:3},{value:"function fromType",id:"function-fromtype",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function isType",id:"function-istype",children:[],level:3}],level:2}],u={toc:i};function _(e){var n=e.components,t=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,o.kt)("h3",{id:"using-base"},"using Base"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ClassTypeHelper< std::shared_ptr< BaseComponent > >::Base =  BaseComponent;\n")),(0,o.kt)("h3",{id:"using-type"},"using Type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ClassTypeHelper< std::shared_ptr< BaseComponent > >::Type =  std::shared_ptr<BaseComponent>;\n")),(0,o.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,o.kt)("h3",{id:"function-totype"},"function toType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline Type toType(\n    json::Value & value\n)\n")),(0,o.kt)("h3",{id:"function-fromtype"},"function fromType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline json::Value fromType(\n    const Type & value,\n    json::Value::AllocatorType & allocator\n)\n")),(0,o.kt)("h3",{id:"function-empty"},"function empty"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline bool empty(\n    const Type & value\n)\n")),(0,o.kt)("h3",{id:"function-istype"},"function isType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline bool isType(\n    const json::Value & value\n)\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 29 January 2022 at 04:47:26 UTC"))}_.isMDXComponent=!0}}]);