"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[9118],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return u}});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=a.createContext({}),l=function(n){var e=a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},c=function(n){var e=l(n.components);return a.createElement(i.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,i=n.parentName,c=p(n,["components","mdxType","originalType","parentName"]),d=l(t),u=o,_=d["".concat(i,".").concat(u)]||d[u]||m[u]||r;return t?a.createElement(_,s(s({ref:e},c),{},{components:t})):a.createElement(_,s({ref:e},c))}));function u(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,s=new Array(r);s[0]=d;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=n,p.mdxType="string"==typeof n?n:o,s[1]=p;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5087:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var a=t(3117),o=t(102),r=(t(7294),t(3905)),s=["components"],p={title:"include/sleepy_discord/slash_commands.h"},i=void 0,l={unversionedId:"reference/Files/slash__commands_8h",id:"reference/Files/slash__commands_8h",title:"include/sleepy_discord/slash_commands.h",description:"Namespaces",source:"@site/docs/reference/Files/slash__commands_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/slash__commands_8h",permalink:"/sleepy-discord/docs/reference/Files/slash__commands_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/slash_commands.h"},sidebar:"Reference",previous:{title:"sleepy_discord/slash_commands.cpp",permalink:"/sleepy-discord/docs/reference/Files/slash__commands_8cpp"},next:{title:"include/sleepy_discord/sleepy_discord.h",permalink:"/sleepy-discord/docs/reference/Files/sleepy__discord_8h"}},c=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function AppCommand::Option::Choice::set&lt; json::Value &gt;",id:"function-appcommandoptionchoiceset-jsonvalue-",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],m={toc:c};function d(n){var e=n.components,t=(0,o.Z)(n,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"namespaces"},"Namespaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command"},"SleepyDiscord::AppCommand")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option"},"SleepyDiscord::AppCommand::Option")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper"},"SleepyDiscord::AppCommand::Option::TypeHelper")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_impl"},"SleepyDiscord::AppCommand::Option::TypeHelperImpl")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01bool_00_01void_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< bool, void >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01std_1_1string_00_01void_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< std::string, void >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01_channel_00_01void_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< Channel, void >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01_role_00_01void_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< Role, void >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01_user_00_01void_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< User, void >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01_int_00_01typename_01is_int_3_01_int_01_4_1_1type_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< Int, typename isInt< Int >::type >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_type_helper_3_01_num_00_01typename_01is_num_3_01_num_01_4_1_1type_01_4"},"SleepyDiscord::AppCommand::Option::TypeHelper< Num, typename isNum< Num >::type >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_choice"},"SleepyDiscord::AppCommand::Option::Choice")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_permissions"},"SleepyDiscord::AppCommand::Permissions")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_server_app_command_permissions"},"SleepyDiscord::ServerAppCommandPermissions")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_get_default_3_01_app_command_1_1_option_1_1_default_01_4"},"SleepyDiscord::GetDefault< AppCommand::Option::Default >")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_app_command_callback_data"},"SleepyDiscord::InteractionAppCommandCallbackData")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_data"},"SleepyDiscord::InteractionData")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_option"},"SleepyDiscord::InteractionData::Option")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction"},"SleepyDiscord::Interaction")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_1_1_response"},"SleepyDiscord::Interaction::Response")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_autocomplete"},"SleepyDiscord::Autocomplete")))))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"void"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/docs/reference/Files/slash__commands_8h#function-appcommandoptionchoiceset%3C-jsonvalue-%3E"},"AppCommand::Option::Choice::set< json::Value >")),"(json::Value & _val)")))),(0,r.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,r.kt)("h3",{id:"function-appcommandoptionchoiceset-jsonvalue-"},"function AppCommand::Option::Choice::set< json::Value >"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void AppCommand::Option::Choice::set< json::Value >(\n    json::Value & _val\n)\n")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <vector>\n#include "discord_object_interface.h"\n#include "snowflake.h"\n#include "server.h"\n#include "channel.h"\n#include "embed.h"\n#include "message.h"\n#include "user.h"\n\nnamespace SleepyDiscord {\n    \n    struct InteractionData;\n\n    struct AppCommand : public IdentifiableDiscordObject<AppCommand> {\n        AppCommand() = default;\n        AppCommand(json::Value & json);\n        AppCommand(const nonstd::string_view& json) :\n            AppCommand(json::fromJSON<AppCommand>(json)) {}\n        \n        struct Option : public DiscordObject {\n            Option() = default;\n            Option(json::Value & json);\n            Option(const nonstd::string_view& json) :\n                AppCommand::Option(json::fromJSON<AppCommand::Option>(json)) {}\n\n            enum class Type : int {\n                NONE              = 0, //made up type\n                SUB_COMMAND       = 1,\n                SUB_COMMAND_GROUP = 2,\n                STRING            = 3,\n                INTEGER           = 4,\n                BOOLEAN           = 5,\n                USER              = 6,\n                CHANNEL           = 7,\n                ROLE              = 8,\n                MENTIONABLE       = 9,\n                NUMBER            = 10\n            };\n\n            template<class T, class C = void>\n            struct TypeHelper {};\n\n            template<Type type, class T>\n            struct TypeHelperImpl {\n                static constexpr Type getType() { return _type; }\n            private:\n                static constexpr Type _type = type;\n            };\n\n            template<> struct TypeHelper<bool, void> : public TypeHelperImpl<Type::BOOLEAN, bool    > {};\n            template<> struct TypeHelper<std::string, void> : public TypeHelperImpl<Type::STRING, std::string> {};\n            template<> struct TypeHelper<Channel, void> : public TypeHelperImpl<Type::CHANNEL, Channel> {};\n            template<> struct TypeHelper<Role, void> : public TypeHelperImpl<Type::ROLE, Role> {};\n            template<> struct TypeHelper<User, void> : public TypeHelperImpl<Type::USER, User> {};\n\n            template<class Int>\n            using isInt = typename std::enable_if < std::is_integral< Int >::value > ;\n\n            template<class Num>\n            using isNum = typename std::enable_if < std::is_floating_point< Num >::value > ;\n\n            template<class Int>\n            struct TypeHelper<\n                Int, typename isInt<Int>::type\n            > : public TypeHelperImpl< Type::INTEGER, Int > {};\n\n            template<class Num>\n            struct TypeHelper<\n                Num, typename isNum<Num>::type\n            > : public TypeHelperImpl< Type::NUMBER, Num > {};\n\n            struct Choice : public DiscordObject {\n                Choice() = default;\n                Choice(json::Value & json);\n                Choice(const nonstd::string_view& json) :\n                    AppCommand::Option::Choice(json::fromJSON<AppCommand::Option::Choice>(json)) {}\n\n                std::string name;\n                json::Value value;\n\n                //warning crashes if type isn\'t correct\n                template<class Type>\n                inline const Type get() {\n                    return json::ClassTypeHelper<Type>::toType(value);\n                }\n\n                template<class Type>\n                inline const bool get(Type& target) {\n                    return json::castValue<json::ClassTypeHelper<Type>>(target, value);\n                }\n\n                template<class Type>\n                inline void setCopy(Type& val) {\n                    value = json::copy(json::ClassTypeHelper<Type>::fromType(val));\n                }\n\n                template<class Type>\n                inline void setView(Type& val) {\n                    value = json::ClassTypeHelper<Type>::fromType(val);\n                }\n\n                Choice copy() {\n                    Choice choice;\n                    choice.name = name;\n                    choice.value = json::copy(value);\n                    return choice;\n                }\n\n                template<class Type>\n                inline void set(Type& val) {\n                    setView(val);\n                }\n\n                JSONStructStart\n                    std::make_tuple(\n                        json::pair(&AppCommand::Option::Choice::name , "name" , json::REQUIRIED_FIELD),\n                        json::pair(&AppCommand::Option::Choice::value, "value", json::REQUIRIED_FIELD)\n                    );\n                JSONStructEnd\n            };\n\n            Type type;\n            std::string name;\n            std::string description;\n            enum class Default : char {\n                True = true,\n                False = false,\n                Undefined = -1\n            };\n            Default isDefault = Default::Undefined; //default is an already taken keyword\n            bool isRequired = false;\n            std::vector<Choice> choices;\n            std::vector<Option> options;\n            std::vector<Channel::ChannelType> channelTypes;\n            double minValue = std::numeric_limits<double>::quiet_NaN();\n            double maxValue = std::numeric_limits<double>::quiet_NaN();\n            bool autocomplete = false;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair<json::EnumTypeHelper     >(&AppCommand::Option::type        , "type"        , json::REQUIRIED_FIELD),\n                    json::pair                           (&AppCommand::Option::name        , "name"        , json::REQUIRIED_FIELD),\n                    json::pair                           (&AppCommand::Option::description , "description" , json::OPTIONAL_FIELD ),\n                    json::pair                           (&AppCommand::Option::isRequired  , "required"    , json::OPTIONAL_FIELD ),\n                    json::pair<json::ContainerTypeHelper>(&AppCommand::Option::choices     , "choices"     , json::OPTIONAL_FIELD ),\n                    json::pair<json::ContainerTypeHelper>(&AppCommand::Option::options     , "options"     , json::OPTIONAL_FIELD ),\n                    json::pair                           (&AppCommand::Option::autocomplete, "autocomplete", json::OPTIONAL_FIELD )\n                );\n            JSONStructEnd\n        };\n\n        struct Permissions : public IdentifiableDiscordObject<DiscordObject> {\n            enum class Type : int {\n                ROLE = 1,\n                USER = 2\n            };\n            Permissions::Type Type;\n            bool Permission;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair                      (&Permissions::ID        , "id"        , json::REQUIRIED_FIELD),\n                    json::pair<json::EnumTypeHelper>(&Permissions::Type      , "type"      , json::REQUIRIED_FIELD),\n                    json::pair                      (&Permissions::Permission, "permission", json::REQUIRIED_FIELD)\n                );\n            JSONStructEnd\n        };\n\n        using InteractionData = SleepyDiscord::InteractionData;\n\n        enum class Type : int {\n            NONE       = 0, //made up for interal library use\n            CHAT_INPUT = 1,\n            USER       = 2,\n            MESSAGE    = 3\n        };\n        Type type = Type::CHAT_INPUT;\n        Snowflake<DiscordObject> applicationID;\n        std::string name;\n        std::string description;\n        std::vector<Option> options;\n        Snowflake<Server> serverID;\n        bool defaultPermission = true;\n        Snowflake<DiscordObject> version;\n\n        using EmptyOptions = std::array<EmptyDiscordObject, 0>;\n        static constexpr EmptyOptions emptyOptions = EmptyOptions{};\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&AppCommand::ID               , "id"                , json::REQUIRIED_FIELD),\n                json::pair<json::EnumTypeHelper     >(&AppCommand::type             , "type"              , json::OPTIONAL_FIELD ),\n                json::pair                           (&AppCommand::applicationID    , "application_id"    , json::REQUIRIED_FIELD),\n                json::pair                           (&AppCommand::name             , "name"              , json::REQUIRIED_FIELD),\n                json::pair                           (&AppCommand::description      , "description"       , json::OPTIONAL_FIELD ),\n                json::pair                           (&AppCommand::defaultPermission, "default_permission", json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&AppCommand::options          , "options"           , json::OPTIONAL_FIELD ),\n                json::pair                           (&AppCommand::serverID         , "guild_id"          , json::OPTIONAL_FIELD ),\n                json::pair                           (&AppCommand::version          , "version"           , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n\n    struct ServerAppCommandPermissions : IdentifiableDiscordObject<AppCommand> {\n        Snowflake<User> applicationID;\n        Snowflake<Server> serverID;\n        std::vector<AppCommand::Permissions> permissions;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&ServerAppCommandPermissions::ID           , "id"            , json::REQUIRIED_FIELD),\n                json::pair                           (&ServerAppCommandPermissions::applicationID, "application_id", json::REQUIRIED_FIELD),\n                json::pair                           (&ServerAppCommandPermissions::serverID     , "guild_id"      , json::REQUIRIED_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ServerAppCommandPermissions::permissions  , "permissions"   , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    template<>\n    struct GetDefault<AppCommand::Option::Default> {\n        static inline const AppCommand::Option::Default get() {\n            return AppCommand::Option::Default::Undefined;\n        }\n    };\n\n    template<>\n    inline void AppCommand::Option::Choice::set<decltype(nullptr)>(decltype(nullptr)&) {\n        value.SetNull();\n    }\n\n    template<>\n    inline void AppCommand::Option::Choice::set<json::Value>(json::Value& _val) {\n        value = _val; //moves\n    }\n\n    struct InteractionAppCommandCallbackData : public EditWebhookParams {\n        InteractionAppCommandCallbackData() = default;\n        InteractionAppCommandCallbackData(json::Value & json);\n        InteractionAppCommandCallbackData(const nonstd::string_view& json) :\n            InteractionAppCommandCallbackData(json::fromJSON<InteractionAppCommandCallbackData>(json)) {}\n\n        inline const bool empty() const { return content.empty() && embeds.empty() && components.empty(); }\n\n        bool tts = false;\n        enum class Flags : int {\n            NONE = 0,\n            Ephemeral = 1 << 6\n        } flags = Flags::NONE;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&InteractionAppCommandCallbackData::tts            , "tts"             , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionAppCommandCallbackData::content        , "content"         , json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&InteractionAppCommandCallbackData::embeds         , "embeds"          , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionAppCommandCallbackData::allowedMentions, "allowed_mentions", json::OPTIONAL_FIELD),\n                json::pair<json::EnumTypeHelper     >(&InteractionAppCommandCallbackData::flags          , "flags"           , json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&InteractionAppCommandCallbackData::components     , "components"      , json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    struct InteractionData : public DiscordObject {\n        InteractionData() = default;\n        InteractionData(json::Value& json);\n        InteractionData(const nonstd::string_view& json) :\n            InteractionData(json::fromJSON<InteractionData>(json)) {}\n\n        struct Option : public DiscordObject {\n            Option() = default;\n            Option(json::Value& json);\n            Option(const nonstd::string_view& json) :\n                InteractionData::Option(json::fromJSON<InteractionData::Option>(json)) {}\n\n            std::string name;\n            AppCommand::Option::Type type = AppCommand::Option::Type::NONE;\n            json::Value value;\n            std::vector<Option> options;\n            bool focused = false;\n\n            //warning crashes on type error\n            template<class Type>\n            Type get() {\n                return json::ClassTypeHelper<Type>::toType(value);\n            }\n\n            template<class Type>\n            bool get(Type& target) {\n                return json::castValue<json::ClassTypeHelper<Type>>(target, value);\n            }\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair                           (&InteractionData::Option::name   , "name"   , json::OPTIONAL_FIELD),\n                    json::pair<json::EnumTypeHelper     >(&InteractionData::Option::type   , "type"   , json::OPTIONAL_FIELD),\n                    json::pair                           (&InteractionData::Option::value  , "value"  , json::OPTIONAL_FIELD),\n                    json::pair<json::ContainerTypeHelper>(&InteractionData::Option::options, "options", json::OPTIONAL_FIELD),\n                    json::pair                           (&InteractionData::Option::focused, "focused", json::OPTIONAL_FIELD)\n                );\n            JSONStructEnd\n        };\n\n        Snowflake<AppCommand> ID;\n        std::string name;\n        AppCommand::Type type = AppCommand::Type::NONE;\n        std::vector<Option> options;\n        std::string customID;\n        ComponentType componentType;\n        std::vector<std::string> values;\n        Snowflake<DiscordObject> targetID;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&InteractionData::ID           , "id"            , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionData::name         , "name"          , json::OPTIONAL_FIELD),\n                json::pair<json::EnumTypeHelper     >(&InteractionData::type         , "type"          , json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&InteractionData::options      , "options"       , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionData::customID     , "custom_id"     , json::OPTIONAL_FIELD),\n                json::pair<json::EnumTypeHelper     >(&InteractionData::componentType, "component_type", json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&InteractionData::values       , "values"        , json::OPTIONAL_FIELD),\n                json::pair                           (&InteractionData::targetID     , "target_id"     , json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    * to do implement json maps first\n    struct ResolvedData : public DiscordObject {\n        ResolvedData() = default;\n        ResolvedData(json::Value& json);\n        ResolvedData(const nonstd::string_view& json) :\n            ResolvedData(json::fromJSON<ResolvedData>(json)) {}\n\n\n    };\n    */\n\n    struct Interaction : IdentifiableDiscordObject<Interaction> {\n        Interaction() = default;\n        Interaction(json::Value & json);\n        Interaction(const nonstd::string_view& json) :\n            Interaction(json::fromJSON<Interaction>(json)) {}\n\n        enum class CallbackType : int {\n            NONE                                 = 0, //made up type\n            Pong                                 = 1,\n            ChannelMessageWithSource             = 4,\n            DeferredChannelMessageWithSource     = 5,\n            DeferredUpdateMessage                = 6,\n            UpdateMessage                        = 7,\n            ApplicationCommandAutocompleteResult = 8,\n        };\n\n        struct Response : public DiscordObject {\n            Response() = default;\n            Response(json::Value & json);\n            Response(const nonstd::string_view& json) :\n                Interaction::Response(json::fromJSON<Interaction::Response>(json)) {}\n\n            using Type = CallbackType;\n            Type type;\n            InteractionAppCommandCallbackData data;\n\n            JSONStructStart\n                std::make_tuple(\n                    json::pair<json::EnumTypeHelper>(&Interaction::Response::type, "type", json::REQUIRIED_FIELD),\n                    json::pair                      (&Interaction::Response::data, "data", json::OPTIONAL_FIELD )\n                );\n            JSONStructEnd\n        };\n\n        using AppCommandCallbackData = InteractionAppCommandCallbackData;\n        using Type = InteractionType;\n        InteractionType type;\n        Snowflake<DiscordObject> applicationID;\n        InteractionData data;\n        Snowflake<Server> serverID;\n        Snowflake<Channel> channelID;\n        ServerMember member;\n        User user;\n        std::string token;\n        int version = 1;\n        Message message;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                      (&Interaction::ID           , "id"            , json::REQUIRIED_FIELD),\n                json::pair                      (&Interaction::applicationID, "application_id", json::OPTIONAL_FIELD ),\n                json::pair<json::EnumTypeHelper>(&Interaction::type         , "type"          , json::REQUIRIED_FIELD),\n                json::pair                      (&Interaction::data         , "data"          , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::serverID     , "guild_id"      , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::channelID    , "channel_id"    , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::member       , "member"        , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::user         , "user"          , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::token        , "token"         , json::OPTIONAL_FIELD ),\n                json::pair<                   1>(&Interaction::version      , "version"       , json::OPTIONAL_FIELD ),\n                json::pair                      (&Interaction::message      , "message"       , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n\n    struct Autocomplete : public DiscordObject {\n        Autocomplete() = default;\n        Autocomplete(json::Value& json);\n        Autocomplete(const nonstd::string_view& json) :\n            Autocomplete(json::fromJSON<Autocomplete>(json)) {}\n\n        std::vector<AppCommand::Option::Choice> choices;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair<json::ContainerTypeHelper>(&Autocomplete::choices, "choices", json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n}; // namespace SleepyDiscord\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Updated on  2 January 2022 at 00:25:08 UTC"))}d.isMDXComponent=!0}}]);