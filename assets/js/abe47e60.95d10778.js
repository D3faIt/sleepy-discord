"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[891],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,c=e.originalType,o=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=s(r),m=i,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||c;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=r.length,l=new Array(c);l[0]=d;var a={};for(var o in t)hasOwnProperty.call(t,o)&&(a[o]=t[o]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var s=2;s<c;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9630:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return a},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=r(3117),i=r(102),c=(r(7294),r(3905)),l=["components"],a={title:"SleepyDiscord::RateLimiter"},o=void 0,s={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_rate_limiter",id:"reference/Classes/struct_sleepy_discord_1_1_rate_limiter",title:"SleepyDiscord::RateLimiter",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_rate_limiter.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_rate_limiter",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_rate_limiter",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::RateLimiter"},sidebar:"Reference",previous:{title:"SleepyDiscord::PresenceUpdate",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_presence_update"},next:{title:"SleepyDiscord::RateLimiter::RateLimit",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_rate_limiter_1_1_rate_limit"}},u=[{value:"Detailed Description",id:"detailed-description",children:[],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function limitBucket",id:"function-limitbucket",children:[],level:3},{value:"function getLiftTime",id:"function-getlifttime",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable isGlobalRateLimited",id:"variable-isglobalratelimited",children:[],level:3},{value:"variable nextRetry",id:"variable-nextretry",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,i.Z)(e,l);return(0,c.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"#detailed-description"},"More...")),(0,c.kt)("h2",{id:"detailed-description"},"Detailed Description"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Client >\nstruct SleepyDiscord::RateLimiter;\n")),(0,c.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,c.kt)("h3",{id:"function-limitbucket"},"function limitBucket"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void limitBucket(\n    const Route::Bucket & bucket,\n    const std::string & xBucket,\n    time_t timestamp\n)\n")),(0,c.kt)("h3",{id:"function-getlifttime"},"function getLiftTime"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const time_t getLiftTime(\n    Route::Bucket & bucket,\n    const time_t & currentTime\n)\n")),(0,c.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,c.kt)("h3",{id:"variable-isglobalratelimited"},"variable isGlobalRateLimited"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"std::atomic< bool > isGlobalRateLimited = { false };\n")),(0,c.kt)("h3",{id:"variable-nextretry"},"variable nextRetry"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"std::atomic< time_t > nextRetry = { 0 };\n")),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on 26 January 2022 at 07:14:54 UTC"))}d.isMDXComponent=!0}}]);