"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7564],{3905:function(e,t,n){n.d(t,{Zo:function(){return a},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},a=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,a=u(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||c;return n?r.createElement(m,i(i({ref:t},a),{},{components:n})):r.createElement(m,i({ref:t},a))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var l=2;l<c;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5666:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return a},default:function(){return d}});var r=n(3117),o=n(102),c=(n(7294),n(3905)),i=["components"],u={title:"SleepyDiscord::Route"},s=void 0,l={unversionedId:"reference/Classes/class_sleepy_discord_1_1_route",id:"reference/Classes/class_sleepy_discord_1_1_route",title:"SleepyDiscord::Route",description:"Public Types Documentation",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_route.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/class_sleepy_discord_1_1_route",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_route",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Route"},sidebar:"Reference",previous:{title:"SleepyDiscord::RateLimiter::HandleAwaitAfterRequest",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_rate_limiter_1_1_handle_await_after_request"},next:{title:"SleepyDiscord::ServerCache",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_server_cache"}},a=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Bucket",id:"using-bucket",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Route",id:"function-route",children:[],level:3},{value:"function Route",id:"function-route-1",children:[],level:3},{value:"function url",id:"function-url",children:[],level:3},{value:"function bucket",id:"function-bucket",children:[],level:3},{value:"function operator const std::string &amp;",id:"function-operator-const-stdstring-",children:[],level:3}],level:2}],p={toc:a};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,c.kt)("h3",{id:"using-bucket"},"using Bucket"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Route::Bucket =  std::string;\n")),(0,c.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,c.kt)("h3",{id:"function-route"},"function Route"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"Route(\n    const std::string route,\n    const std::initializer_list< std::string > & _values ={}\n)\n")),(0,c.kt)("h3",{id:"function-route-1"},"function Route"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"Route(\n    const char * route\n)\n")),(0,c.kt)("h3",{id:"function-url"},"function url"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const std::string & url()\n")),(0,c.kt)("h3",{id:"function-bucket"},"function bucket"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"const Bucket bucket(\n    RequestMethod method\n)\n")),(0,c.kt)("h3",{id:"function-operator-const-stdstring-"},"function operator const std::string &"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"inline operator const std::string &()\n")),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on  2 January 2022 at 02:05:35 UTC"))}d.isMDXComponent=!0}}]);