"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[5718],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=u(n),m=l,k=s["".concat(o,".").concat(m)]||s[m]||d[m]||r;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5445:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return s}});var a=n(3117),l=n(102),r=(n(7294),n(3905)),i=["components"],p={title:"SleepyDiscord::AppCommand::Option"},o=void 0,u={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option",id:"reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option",title:"SleepyDiscord::AppCommand::Option",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::AppCommand::Option"},sidebar:"Reference",previous:{title:"SleepyDiscord::AppCommand",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_app_command"},next:{title:"SleepyDiscord::AppCommand::Option::Choice",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_app_command_1_1_option_1_1_choice"}},c=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"enum Type",id:"enum-type",children:[],level:3},{value:"enum Default",id:"enum-default",children:[],level:3},{value:"using isInt",id:"using-isint",children:[],level:3},{value:"using isNum",id:"using-isnum",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Option",id:"function-option",children:[],level:3},{value:"function Option",id:"function-option-1",children:[],level:3},{value:"function Option",id:"function-option-2",children:[],level:3},{value:"function std::make_tuple",id:"function-stdmake_tuple",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable type",id:"variable-type",children:[],level:3},{value:"variable name",id:"variable-name",children:[],level:3},{value:"variable description",id:"variable-description",children:[],level:3},{value:"variable isDefault",id:"variable-isdefault",children:[],level:3},{value:"variable isRequired",id:"variable-isrequired",children:[],level:3},{value:"variable choices",id:"variable-choices",children:[],level:3},{value:"variable options",id:"variable-options",children:[],level:3},{value:"variable channelTypes",id:"variable-channeltypes",children:[],level:3},{value:"variable minValue",id:"variable-minvalue",children:[],level:3},{value:"variable maxValue",id:"variable-maxvalue",children:[],level:3},{value:"variable autocomplete",id:"variable-autocomplete",children:[],level:3}],level:2}],d={toc:c};function s(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Inherits from ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),(0,r.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,r.kt)("h3",{id:"enum-type"},"enum Type"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NONE"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SUB_COMMAND"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SUB_COMMAND_GROUP"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INTEGER"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CHANNEL"),(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROLE"),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MENTIONABLE"),(0,r.kt)("td",{parentName:"tr",align:null},"9"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NUMBER"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"enum-default"},"enum Default"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"-1"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"using-isint"},"using isInt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Int >\nusing SleepyDiscord::AppCommand::Option::isInt =  typename std::enable_if < std::is_integral< Int >::value >;\n")),(0,r.kt)("h3",{id:"using-isnum"},"using isNum"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Num >\nusing SleepyDiscord::AppCommand::Option::isNum =  typename std::enable_if < std::is_floating_point< Num >::value >;\n")),(0,r.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,r.kt)("h3",{id:"function-option"},"function Option"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Option() =default\n")),(0,r.kt)("h3",{id:"function-option-1"},"function Option"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Option(\n    json::Value & json\n)\n")),(0,r.kt)("h3",{id:"function-option-2"},"function Option"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Option(\n    const nonstd::string_view & json\n)\n")),(0,r.kt)("h3",{id:"function-stdmake_tuple"},"function std::make_tuple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'JSONStructStart std::make_tuple(\n    json::pair< json::EnumTypeHelper > &::::, "", ::REQUIRIED_FIELD ,\n    json::pair &::::, "", ::REQUIRIED_FIELD ,\n    json::pair &::::, "", ::OPTIONAL_FIELD ,\n    json::pair &::::, "", ::OPTIONAL_FIELD ,\n    json::pair< json::ContainerTypeHelper > &::::, "", ::OPTIONAL_FIELD ,\n    json::pair< json::ContainerTypeHelper > &::::, "", ::OPTIONAL_FIELD ,\n    json::pair &::::, "", ::OPTIONAL_FIELD \n)\n')),(0,r.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,r.kt)("h3",{id:"variable-type"},"variable type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Type type;\n")),(0,r.kt)("h3",{id:"variable-name"},"variable name"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string name;\n")),(0,r.kt)("h3",{id:"variable-description"},"variable description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string description;\n")),(0,r.kt)("h3",{id:"variable-isdefault"},"variable isDefault"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Default isDefault = Default::Undefined;\n")),(0,r.kt)("h3",{id:"variable-isrequired"},"variable isRequired"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isRequired = false;\n")),(0,r.kt)("h3",{id:"variable-choices"},"variable choices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector< Choice > choices;\n")),(0,r.kt)("h3",{id:"variable-options"},"variable options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector< Option > options;\n")),(0,r.kt)("h3",{id:"variable-channeltypes"},"variable channelTypes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector< Channel::ChannelType > channelTypes;\n")),(0,r.kt)("h3",{id:"variable-minvalue"},"variable minValue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double minValue = std::numeric_limits<double>::quiet_NaN();\n")),(0,r.kt)("h3",{id:"variable-maxvalue"},"variable maxValue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"double maxValue = std::numeric_limits<double>::quiet_NaN();\n")),(0,r.kt)("h3",{id:"variable-autocomplete"},"variable autocomplete"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"bool autocomplete = false;\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Updated on  2 January 2022 at 00:25:08 UTC"))}s.isMDXComponent=!0}}]);