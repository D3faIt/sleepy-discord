"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[8561],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,u=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=s(n),f=o,y=d["".concat(c,".").concat(f)]||d[f]||p[f]||u;return n?r.createElement(y,i(i({ref:t},l),{},{components:n})):r.createElement(y,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=n.length,i=new Array(u);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var s=2;s<u;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4797:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var r=n(3117),o=n(102),u=(n(7294),n(3905)),i=["components"],a={title:"SleepyDiscord::BaseAudioOutput"},c=void 0,s={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_base_audio_output",id:"reference/Classes/struct_sleepy_discord_1_1_base_audio_output",title:"SleepyDiscord::BaseAudioOutput",description:"Public Types Documentation",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_output.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_base_audio_output",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_output",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::BaseAudioOutput"},sidebar:"Reference",previous:{title:"SleepyDiscord::AuditLogKeyData",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_audit_log_key_data"},next:{title:"SleepyDiscord::BaseAudioSource",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_source"}},l=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Container",id:"using-container",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function BaseAudioOutput",id:"function-baseaudiooutput",children:[],level:3},{value:"function ~BaseAudioOutput",id:"function-baseaudiooutput-1",children:[],level:3},{value:"function write",id:"function-write",children:[],level:3}],level:2}],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,u.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,u.kt)("h3",{id:"using-container"},"using Container"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::BaseAudioOutput::Container =  std::array<AudioSample, AudioTransmissionDetails::proposedLength()>;\n")),(0,u.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,u.kt)("h3",{id:"function-baseaudiooutput"},"function BaseAudioOutput"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"BaseAudioOutput() =default\n")),(0,u.kt)("h3",{id:"function-baseaudiooutput-1"},"function ~BaseAudioOutput"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual ~BaseAudioOutput() =default\n")),(0,u.kt)("h3",{id:"function-write"},"function write"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void write(\n    Container audio,\n    AudioTransmissionDetails & details\n)\n")),(0,u.kt)("hr",null),(0,u.kt)("p",null,"Updated on  2 January 2022 at 02:05:35 UTC"))}d.isMDXComponent=!0}}]);