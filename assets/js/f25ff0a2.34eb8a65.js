"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[4057],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),a=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=a(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=a(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||c;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,l=new Array(c);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var a=2;a<c;a++)l[a]=n[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1603:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return a},toc:function(){return s},default:function(){return d}});var r=n(3117),o=n(102),c=(n(7294),n(3905)),l=["components"],i={title:"SleepyDiscord::Autocomplete"},u=void 0,a={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_autocomplete",id:"reference/Classes/struct_sleepy_discord_1_1_autocomplete",title:"SleepyDiscord::Autocomplete",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_autocomplete.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_autocomplete",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_autocomplete",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Autocomplete"},sidebar:"Reference",previous:{title:"SleepyDiscord::AuditLogKeyData",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_audit_log_key_data"},next:{title:"SleepyDiscord::BaseAudioOutput",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_output"}},s=[{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Autocomplete",id:"function-autocomplete",children:[],level:3},{value:"function Autocomplete",id:"function-autocomplete-1",children:[],level:3},{value:"function Autocomplete",id:"function-autocomplete-2",children:[],level:3},{value:"function std::make_tuple",id:"function-stdmake_tuple",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable choices",id:"variable-choices",children:[],level:3}],level:2}],p={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Inherits from ",(0,c.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),(0,c.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,c.kt)("h3",{id:"function-autocomplete"},"function Autocomplete"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"Autocomplete() =default\n")),(0,c.kt)("h3",{id:"function-autocomplete-1"},"function Autocomplete"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"Autocomplete(\n    json::Value & json\n)\n")),(0,c.kt)("h3",{id:"function-autocomplete-2"},"function Autocomplete"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Autocomplete(\n    const nonstd::string_view & json\n)\n")),(0,c.kt)("h3",{id:"function-stdmake_tuple"},"function std::make_tuple"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'JSONStructStart std::make_tuple(\n    json::pair< json::ContainerTypeHelper > &::, "", ::REQUIRIED_FIELD \n)\n')),(0,c.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,c.kt)("h3",{id:"variable-choices"},"variable choices"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector< AppCommand::Option::Choice > choices;\n")),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on  2 January 2022 at 01:46:00 UTC"))}d.isMDXComponent=!0}}]);