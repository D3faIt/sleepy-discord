"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[5514],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),l=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,_=u["".concat(o,".").concat(m)]||u[m]||p[m]||c;return n?r.createElement(_,s(s({ref:t},d),{},{components:n})):r.createElement(_,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,s=new Array(c);s[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<c;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2647:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(3117),a=n(102),c=(n(7294),n(3905)),s=["components"],i={title:"include/sleepy_discord/discord_object_interface.h"},o=void 0,l={unversionedId:"reference/Files/discord__object__interface_8h",id:"reference/Files/discord__object__interface_8h",title:"include/sleepy_discord/discord_object_interface.h",description:"Namespaces",source:"@site/docs/reference/Files/discord__object__interface_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/discord__object__interface_8h",permalink:"/sleepy-discord/docs/reference/Files/discord__object__interface_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/discord_object_interface.h"},sidebar:"Reference",previous:{title:"sleepy_discord",permalink:"/sleepy-discord/docs/reference/Files/dir_e8fa4e2dbc3cb0510f69ea6b27e9c04c"},next:{title:"sleepy_discord/embed.cpp",permalink:"/sleepy-discord/docs/reference/Files/embed_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function index",id:"function-index",children:[],level:3},{value:"function JSON_getArray",id:"function-json_getarray",children:[],level:3},{value:"function JSON_getArray",id:"function-json_getarray-1",children:[],level:3},{value:"function JSON_getList",id:"function-json_getlist",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"namespaces"},"Namespaces"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,c.kt)("h2",{id:"classes"},"Classes"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null}),(0,c.kt)("th",{parentName:"tr",align:null},"Name"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"class"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")))),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"struct"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_empty_discord_object"},"SleepyDiscord::EmptyDiscordObject")))),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"class"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_identifiable_discord_object"},"SleepyDiscord::IdentifiableDiscordObject")))))),(0,c.kt)("h2",{id:"functions"},"Functions"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null}),(0,c.kt)("th",{parentName:"tr",align:null},"Name"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"template <template< class... > class Container,typename Type ",">"," ",(0,c.kt)("br",null),"constexpr unsigned int"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-index"},"index")),"(Container< Type ",(0,c.kt)("em",{parentName:"td"},"const > names, Type ")," name, unsigned int i =0)")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"template <class _DiscordObject ",">"," ",(0,c.kt)("br",null),"std::vector< _DiscordObject >"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getarray"},"JSON_getArray")),"(const std::string * _source)")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"template <class _DiscordObject ,class Type ",">"," ",(0,c.kt)("br",null),"std::vector< _DiscordObject >"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getarray"},"JSON_getArray")),"(const Type & _source)")),(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},"template <class _DiscordObject ,class Type ",">"," ",(0,c.kt)("br",null),"std::list< _DiscordObject >"),(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getlist"},"JSON_getList")),"(const Type & _source)")))),(0,c.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,c.kt)("h3",{id:"function-index"},"function index"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type >\nconstexpr unsigned int index(\n    Container< Type *const > names,\n    Type * name,\n    unsigned int i =0\n)\n")),(0,c.kt)("h3",{id:"function-json_getarray"},"function JSON_getArray"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject >\nstd::vector< _DiscordObject > JSON_getArray(\n    const std::string * _source\n)\n")),(0,c.kt)("h3",{id:"function-json_getarray-1"},"function JSON_getArray"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject ,\nclass Type >\ninline std::vector< _DiscordObject > JSON_getArray(\n    const Type & _source\n)\n")),(0,c.kt)("h3",{id:"function-json_getlist"},"function JSON_getList"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject ,\nclass Type >\ninline std::list< _DiscordObject > JSON_getList(\n    const Type & _source\n)\n")),(0,c.kt)("h2",{id:"source-code"},"Source code"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <list>\n#include "json_wrapper.h"\n#include "snowflake.h"\n#include "error.h"\n#include "http.h"\n\nnamespace SleepyDiscord {\n    class BaseDiscordClient;\n\n    class DiscordObject {\n\n    };\n\n    struct EmptyDiscordObject {\n        EmptyDiscordObject() = default;\n        EmptyDiscordObject(const nonstd::string_view& rawJSON) :\n            EmptyDiscordObject(json::fromJSON<EmptyDiscordObject>(rawJSON)) {}\n        EmptyDiscordObject(const json::Value & json) :\n            EmptyDiscordObject(json::fromJSON<EmptyDiscordObject>(json)) {}\n\n        JSONStructStart\n            std::make_tuple();\n        JSONStructEnd\n    };\n\n    template <class Derived>\n    class IdentifiableDiscordObject : public DiscordObject {\n    public:\n        IdentifiableDiscordObject() = default;\n        IdentifiableDiscordObject(Snowflake<Derived> id) : ID(id) {}\n\n        using Parent = IdentifiableDiscordObject<Derived>;\n\n        Snowflake<Derived> ID;\n        \n        inline operator Snowflake<Derived>&() {\n            return ID;\n        }\n\n        inline bool empty() const {\n            return ID.empty();\n        }\n\n        void merge(Derived& changes) {\n            json::mergeObj(*this, changes);\n        }\n\n        template<class DiscordObject>\n        inline bool operator==(const Snowflake<DiscordObject>& right) const {\n            return ID == static_cast<Snowflake<DiscordObject>>(right);\n        }\n        \n        template<class DiscordObject>\n        inline bool operator!=(const Snowflake<DiscordObject>& right) const {\n            return ID != static_cast<Snowflake<DiscordObject>>(right);\n        }\n\n        inline bool operator==(const Snowflake<Derived>& right) const {\n            return operator==<Derived>(right);\n        }\n\n        inline bool operator!=(const Snowflake<Derived>& right) const {\n            return operator!=<Derived>(right);\n        }\n\n        inline bool operator==(const IdentifiableDiscordObject<Derived>& right) const {\n            return ID == right.ID;\n        }\n\n        inline bool operator!=(const IdentifiableDiscordObject<Derived>& right) const {\n            return ID != right.ID;\n        }\n\n        inline const Time getTimestamp() {\n            return ID.timestamp();\n        }\n    };\n\n    //constexpr unsigned int index(std::initializer_list<const char *const> names, const char * name, unsigned int i = 0) {\n    //  for (const char *const n : names)\n    //      if (strcmp(n, name) != 0) ++i;\n    //      else break;\n    //  return i;\n    //}//sadly this doesn\'t work on c++11, leaving this here for the future\n\n    template <template<class...> class Container, typename Type> //forces this be done at compile time, I think, and hope it does\n    constexpr unsigned int index(Container<Type*const> names, Type * name, unsigned int i = 0) {\n        return i + names.begin() != names.end() && strcmp(*(i + names.begin()), name) != 0 ? index(names, name, i + 1) : i;\n    }\n\n    template <class _DiscordObject>\n    std::vector<_DiscordObject> JSON_getArray(const std::string* _source) {\n        return json::ArrayWrapper<_DiscordObject>(*_source);\n    }\n\n    //somethings I need it to be a reference\n    template <class _DiscordObject, class Type>\n    inline std::vector<_DiscordObject> JSON_getArray(const Type& _source) {\n        return json::ArrayWrapper<_DiscordObject>(_source);\n    }\n\n    template <class _DiscordObject, class Type>\n    inline std::list<_DiscordObject> JSON_getList(const Type& _source) {\n        return json::ArrayWrapper<_DiscordObject>(_source);\n    }\n}\n')),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on  2 January 2022 at 00:25:08 UTC"))}u.isMDXComponent=!0}}]);